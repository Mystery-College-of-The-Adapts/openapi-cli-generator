package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _templates_commands_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x4b\x73\xdc\xb8\x11\x3e\x93\xbf\x02\xcb\xb2\xb7\x48\x7b\xcc\xf1\x6e\xb6\x72\x98\xec\xa4\x4a\x96\x1f\x72\x95\x25\x2b\x7a\xac\x0f\x8a\x2a\x86\xc8\x9e\x19\x94\x48\x80\x02\x41\x3d\x32\xcb\xff\x9e\x6a\x00\x24\xc1\x21\x67\x24\x39\xb9\xe4\x22\x51\x6c\x10\xdd\xf8\xba\xfb\xeb\x6e\x68\x3a\x25\xfb\x22\x05\xb2\x04\x0e\x92\x2a\x48\xc9\xd5\x03\x11\x05\x70\x5a\xb0\x37\x49\xc6\xde\x58\x81\x90\x31\x79\xff\x95\x1c\x7d\x3d\x23\x1f\xde\x7f\x3e\x8b\xfd\xe9\x94\x9c\x02\x90\x95\x52\x45\x39\x9b\x4e\x97\x4c\xad\xaa\xab\x38\x11\xf9\x54\xb2\x25\x28\xc5\xa6\xa3\xbb\xf8\x7e\x41\x93\x6b\xba\x04\x92\x53\xc6\x7d\x9f\xe5\x85\x90\x8a\x84\xbe\xb7\x5e\x13\xb6\x20\xf1\x67\xfd\xa2\x8c\x3f\xe6\x8a\xd4\x75\xb0\xc8\x55\xb0\x5e\x13\xe0\x29\xa9\xeb\xc1\xa2\x53\x25\x19\x5f\x96\xb8\xb0\x34\x8f\x3b\x16\x9f\xb1\x1c\x70\xa5\x62\x39\x38\xcb\x7c\x2f\x78\xaa\xf1\xd3\x24\x63\x41\x7f\x7d\x71\xbd\x9c\x82\x94\x42\x96\x1b\x02\x59\x4e\xff\x0d\x52\x64\x62\x39\xcd\xc4\x72\x43\x58\x16\x8b\x5f\xfe\x32\x4d\xc4\x95\xa4\xa3\x92\x5b\x56\x80\xd4\x12\x51\x5c\x2f\x63\xc6\xa7\xab\x5f\xb9\xe0\xd3\x25\x70\x95\x41\x4e\x79\x7c\xfb\x6b\xe0\x47\xbe\xbf\x5e\x93\x14\x16\x8c\x03\x09\x0a\x2a\x69\x5e\x06\xf6\xe4\x6f\x88\xa4\x7c\x09\x24\xfe\x5a\x28\x26\x38\xcd\x8e\xb5\x58\x4b\xb5\x98\x2d\x08\xdc\x90\xf8\xec\xa1\x00\x12\x5c\x09\x91\x01\xe5\xe6\x63\xcf\x4b\xf2\x34\xfe\x98\xd1\x65\x19\x46\xf1\x3b\x21\xb2\x10\xe1\x8a\xf7\xbf\x7c\x3e\xa2\x06\xc2\x09\x59\xd0\xac\x84\x09\xd1\x82\xf7\x50\x26\x92\x69\x3d\x28\x8c\xac\x06\xc8\x4a\xe8\xab\x61\x5c\xfd\xf5\xb7\x31\x25\x9f\x51\x30\xa2\xe5\xed\x73\x35\x2c\x32\x41\xb7\xe8\xf8\x68\x44\x63\x5a\xe2\xa7\xe8\x19\xee\x68\xa2\x6f\x64\xc3\x20\x78\x64\xbf\x36\x40\xdf\x74\x51\xe8\xf8\xec\x1b\x65\x0a\xa4\x75\xd6\xd0\x19\x77\x94\xa9\x37\xb8\xbd\x59\xb7\xdd\x31\x56\x7e\xba\xc2\x14\x33\xfa\x7b\x2a\x93\x8c\xc5\xa7\xa0\xf6\xab\x52\x89\xdc\xe8\x48\xf2\x34\xf2\x7d\x8f\x2d\x88\xab\xf7\x80\x96\xf6\x91\xac\x7d\xcf\x33\xa1\x16\xbf\x63\x3c\x3d\x6e\x3f\x6b\x16\x47\xbe\x57\xfb\x4e\x7a\xad\xd7\xe4\x05\x47\xf3\x66\x73\x12\x5b\x3b\xf5\x4b\x5a\x30\xfd\xee\x93\xd8\x78\x7b\x5c\x5d\x65\x2c\xd1\x32\xf3\xd8\xad\xf0\x6f\xa9\x24\xcd\xc7\x75\x7d\x5a\x5d\x25\x22\xcf\x29\x4f\x09\x86\xb0\xef\x2f\x2a\x9e\xb8\x72\x90\xb7\x20\xd1\xec\x8b\xcb\x9c\x16\x17\x86\x24\x2e\xcd\x2f\x3c\x8a\x04\x55\x49\x3e\x26\x5d\x6b\x5f\x59\x8f\xbc\x28\xf5\x46\xda\x24\xbb\xa7\x8d\x87\xd1\xef\x3c\x2f\x48\x3b\xcf\x07\x33\xed\x0d\xbb\xc7\x66\x4c\x4c\xcc\xfa\x4a\x66\x1b\xeb\xce\x4f\xbe\xb4\xf2\x7a\x62\xac\x69\x02\xa7\xf6\x0d\xb0\xd6\x3a\x51\x20\x3f\xe1\x86\x68\xe0\xd7\xe6\x2f\x63\xe3\x74\x4a\xfa\xb8\xd6\x35\xc6\x46\x8b\x29\x4a\xdb\x10\xf1\x3d\x17\xc1\xf1\x0f\xc2\x56\x71\x7c\x02\x37\x15\x93\x90\xb6\xe4\xd2\xdf\xd9\x20\x32\x21\xad\xe5\x26\x70\xc8\x2b\xcd\x6f\xf1\x1f\xf8\xd3\x92\xf4\x3e\xe5\x07\xf4\x16\xde\x89\xf4\x81\xd4\xf5\x84\x5c\xe1\x83\x45\xb4\xf9\x3a\x22\xe1\xab\x8e\x01\x4f\xa0\x2c\x04\xc7\x58\x47\xa5\x27\xda\x91\x9a\x04\xf0\x73\x4d\xc9\x26\x58\x57\x94\xa7\x19\xc8\x63\xaa\x56\x08\x8f\x4e\x8c\x03\xf3\xae\xc9\x1a\xdf\xc3\x80\x1f\x0d\x2b\xed\x4e\x77\x0b\xb3\x83\x89\xe8\xba\x26\x01\x79\x4d\x1c\xb1\xef\x79\x98\x58\x5e\x17\x2f\x98\x63\x27\x15\xdf\x17\x7c\xc1\x96\xf1\x27\x50\xc7\x52\x2c\x58\x06\x61\x14\xef\x15\xec\xfc\xe4\x0b\x2e\xaf\x64\x86\x6b\xcd\x57\xaf\xb5\x89\x5a\x19\xda\x66\x39\xc3\xba\x9a\x4d\xc8\x0b\x8d\xa2\x76\xf5\x00\x7f\xb4\xb6\x63\x77\xb3\x32\xfe\xcc\xb1\x3a\xa8\x55\xc3\x8a\x5a\xdd\xdc\xa2\x5b\xc6\x27\x50\x64\x34\x81\xb0\x92\x99\xe6\x8d\xef\xeb\xef\xda\x91\xf6\x6b\x0b\xd2\x7a\xfd\xbd\xfe\xae\x19\xa6\x13\xb5\x9e\x9e\x90\x5f\xa2\x46\x75\x13\xa3\x7d\xaa\xf1\x24\xdc\x34\x70\xec\x67\x0c\xb8\x8a\xf1\x94\x87\xa0\x56\x02\x97\x84\x11\x06\x3c\xda\x10\xf9\xbd\xcc\x7b\xd2\x81\x87\xe7\xbd\xa9\x40\x3e\xb4\x07\x46\xe5\x73\x22\xe1\x26\xde\x4b\xd3\x7f\xa0\xc8\xb0\x76\x47\x9b\x23\x87\xb2\x27\x72\xab\x8c\xa3\x60\x05\x34\x05\x39\xae\xe1\x40\xcb\x9e\xa3\xa2\xc3\xcc\x81\xec\x91\x2a\xee\xf5\x93\x6d\x36\x27\x96\x97\x3f\x81\x42\x91\x4e\x86\x3f\x89\x62\x2a\xd3\x69\xbb\x59\xa7\xb4\x72\x13\xf7\xce\x36\x3f\xcd\x49\xf3\xf1\x11\xcb\x34\x3f\xe8\x03\x3a\x3d\xc3\x10\xdf\x27\x00\xbc\xc8\x55\x7c\x5a\x48\xc6\xd5\x22\x0c\x5e\xde\x1a\x3c\x1c\x24\xa2\x56\x8b\x5b\xd5\x47\x90\x7e\x0a\xd4\xcf\x50\xd6\x20\xef\x0d\x43\x76\x94\x9a\x2c\x68\x9a\x9f\x7e\x9a\x93\x20\xb0\xf8\x8c\x5a\xb5\x2f\xb8\x02\xae\xde\x20\x9a\x4d\x4f\x70\x08\x29\xa3\x96\xa8\x02\x2c\xe9\xe9\x83\x6d\x24\x70\xcf\xa8\x33\xc5\xb1\x04\xb3\xc6\x70\xd6\x3b\x58\x08\x09\xa1\x43\x39\x13\xeb\xf6\x09\x2a\x8f\x4c\xaa\x95\x85\xa6\x40\x8c\x09\xb4\xe8\xbd\x08\x23\xc3\x71\xf8\xf2\xa7\x39\xe1\x2c\x33\x66\xdb\xfa\xc7\x59\x36\x31\x3f\x4c\x2f\x1b\x7f\x93\xb4\x08\x41\xca\x09\x09\x30\xe5\xa0\x54\x64\x41\x59\x06\xa9\x8e\x1a\x6d\x13\x56\xe2\x14\x12\x91\x42\x3a\x64\x60\xdf\xa8\x43\x4b\xe2\x53\x45\x55\x55\xea\x29\xe3\x77\xf2\xdb\xdb\xb7\x46\xb3\x35\xc6\x52\xc2\x39\xcf\xa9\x2c\x57\x34\x6b\x58\x3d\x34\x87\xf8\xd9\x6a\x88\xfe\x36\x30\xfd\x29\xb6\xb7\xdb\x66\x58\xef\xa5\xdd\xdb\x3d\x8a\xc6\xba\x36\x31\xb7\x13\x91\x0f\xf8\x6b\x11\x06\x07\x67\x67\xc7\xe4\x65\x3a\x23\x2f\xcb\x60\xb2\x79\xc0\xf6\x85\xf6\x67\xd4\x62\x45\x17\xaa\xab\x06\xc6\x91\x7b\xf8\x6a\x9b\x1f\xf1\xe8\xcd\xc9\x0d\x92\x66\x07\xf7\xfc\x0d\xf6\x73\x23\x33\xc1\xca\xa1\xe7\x08\xec\xb8\x41\x2e\x68\x02\xeb\x1a\x13\x28\x0e\x07\x9e\x8a\x5c\xfa\xb1\x4c\xad\x11\xe8\x59\xa1\xb1\x18\x36\x76\x96\xa3\xef\x74\x9f\xa9\x09\xda\x6d\x5d\x9f\xd5\x4a\xb4\x5d\xcb\xff\xa2\xa9\x88\x8c\xd7\x34\x50\x54\x29\xc8\x0b\x85\xd6\xbd\xf5\x3d\x6f\x21\x24\x69\x5e\xfd\xae\xad\x33\xd6\xc7\x7b\xe6\x65\xd9\x52\x9e\x5d\xf5\xfa\xb5\x6f\xe2\xa2\x07\x87\x8d\xdd\xb1\xd3\x75\x27\xf9\x6f\xce\x39\x38\x60\xe4\x64\xcd\x58\x1e\x0c\xa3\x7f\x5f\x54\x59\x4a\xb8\x50\x24\xa1\x59\x46\xac\x97\xda\x66\xb1\x89\x7f\xfc\x89\xc9\x4c\x13\x55\xd1\x8c\x38\x21\xd3\x48\x72\xaa\x92\x95\xe9\xb0\x3d\xb7\x36\xeb\xf7\xd6\xf1\x87\xe6\xb9\xa9\x4d\x9e\xd9\xcd\x00\x65\xe2\xfe\x13\x28\xbd\xe8\x0f\x9a\x55\x26\xbf\x63\xcd\x8f\xf7\xca\x32\xe3\x29\x64\x90\x28\xc3\xe0\xb6\x94\xed\x65\xd9\x29\xce\xe3\x1c\x27\x8b\x5e\x4e\x8c\x63\xf1\x14\x30\x96\xa0\x48\x63\xf9\x2d\xda\x62\x80\xb0\x48\x78\x5a\xe4\xda\xad\x8d\x36\x15\xe6\x0c\x89\x50\xdb\x77\x71\x79\xf5\xa0\x40\xa7\xd3\x87\xfb\x02\x12\x05\x29\xf9\x93\x98\x92\x43\x82\x97\x37\x98\x6d\xd1\xc4\x62\xfa\x23\xf6\x7e\xb3\x16\x1a\xec\x91\xb1\x2a\xd9\x5a\xda\xd6\x48\x23\xb5\x7b\xb5\x7d\x90\x66\x24\x9c\x86\xed\x57\x6d\xe9\xdc\x50\xd7\x70\x9a\x49\x5a\x92\x50\x8e\xf8\x48\xa0\xc9\x8a\xa4\x50\x62\x70\x92\x52\x6f\x75\x05\x09\xad\x4a\x20\x2f\x4b\xc2\x4a\x43\x7d\x03\x97\xed\xc6\xa2\x35\xd1\x19\xa6\x3d\xcf\xbb\x92\x40\xaf\x3b\x59\x5b\x8d\xbd\xba\xdf\x1a\xe1\x5f\x8a\xe5\x10\x9f\x66\x00\x45\x68\x86\xeb\x8c\x62\x45\x7e\x65\xde\x43\x22\x78\xda\x32\x2e\x52\xa6\xcd\xf2\xbf\xcf\x77\xa6\x79\x1f\x92\x23\xb8\x0b\x83\x43\x7a\xcf\xf2\x2a\x6f\x76\x28\x09\xdc\x27\x00\xa9\x5b\xfd\xba\x32\xb1\xc1\x8a\x1b\x13\xe8\x09\x2c\x59\x89\x4c\x5f\xf6\x47\x55\x3d\x9b\x48\x21\x54\x3b\x23\x08\xa1\xcc\xe0\x5d\xf6\xa7\x0f\xbd\x68\x4e\x7e\xd6\xb7\x45\xf1\xbe\x91\x68\xcb\xcf\x4b\x98\xf5\xa6\x11\x33\x2c\xea\x59\xce\x08\xe2\x33\xdb\xfc\x19\xc9\x17\xc1\x97\x33\x1b\xd3\xf2\x3a\x15\x77\x3c\x1c\xbd\xa6\x98\xf8\x6d\x0f\x32\x9c\x88\xe6\x44\xc9\x0a\x7c\xb7\x68\x36\xf6\xdb\x31\x72\xbe\xa1\xdb\x5d\x81\x26\xb4\x79\xb5\xcb\x06\xdf\x33\x97\x22\xba\x05\xeb\x5d\x88\xa0\x23\x11\xb5\xad\x88\xe0\x82\x3e\x14\xf8\x3d\xd1\xcc\x4f\x12\x90\x8a\x32\x4e\xe0\x16\xb8\x22\x42\xb6\x01\x8e\x7d\x15\x31\x6e\x65\x7c\xe9\x02\x16\xbc\xcb\x44\x72\x8d\x51\x00\x49\xa5\x0d\x44\x1c\xaa\x12\x4a\x52\x08\xd3\x5a\x28\x41\x0a\x90\x4c\xa4\x0c\xa9\xf6\x81\x24\x2b\x48\xae\x7f\x40\x63\x6d\x1d\x8e\x4d\xa4\x3d\x58\x88\xc7\xd9\x18\x8a\xb6\x14\x5c\xcf\x94\x5c\x7b\x4b\xd3\xdc\xd3\xe0\x32\x53\x1b\x31\xb8\x4d\x22\x26\x79\xba\x05\x42\x27\xac\xe2\xf3\xb2\x8b\x9d\x76\x02\x88\xf7\x32\x46\xf1\xec\x6d\x0e\xdb\x17\x33\x72\xd1\xbb\x03\xf1\x7a\x13\xcc\xe0\x2b\xcf\xd3\x3a\x1c\x05\x9b\x1d\x79\x73\xf1\x31\x22\x70\x63\xbc\xbd\xde\xb2\x6b\xb7\x45\xb9\x0e\xbd\x26\xbc\xd1\x6c\xb9\x2c\x67\xc4\x20\x70\xc8\x38\x66\xfc\x11\xbe\x43\x72\xc9\x80\xef\x2c\xd5\xcd\x1e\x27\x15\x9f\x11\x04\x3d\x44\x44\x5f\xf5\xe0\x9c\x10\x2a\x97\x65\x0b\x4a\xe3\x14\xb7\xf5\x7d\x62\x73\xf4\xe2\xbe\x37\x04\xef\xb0\x0b\x35\x5e\xe0\xae\xf7\xa4\xae\x2f\x87\x3d\xc4\x48\x1b\xed\x79\x5e\x26\x96\xf1\x47\xaa\x68\x16\x46\x58\x13\xb0\x02\x45\xf1\x61\xb9\x0c\x03\x5d\x21\x74\xe7\x80\x11\x1a\x35\x5e\xf1\x5d\xe7\x98\xbf\x70\x8d\x1b\xb5\xf6\x22\xd1\x90\x38\xd2\x68\xa6\x4b\x52\x73\x4b\xdd\x1d\xa2\x19\xbf\xc2\xa8\x7f\xc7\xe5\x72\xff\x13\xaf\xba\xfa\xe1\x3f\x1e\xfd\x4d\x4f\x03\xf7\x34\x2f\x32\x28\x6d\x3f\xe9\xf7\x3b\x1b\xb8\xd7\xfb\x7f\x68\x16\xd9\xb8\x6b\x3f\x7a\x3d\x27\x01\xd1\x97\x3f\x2d\xb3\xd9\x83\x63\x2b\x1f\x46\xe4\x35\x09\xb4\x77\x5b\x7b\x6d\x32\xe9\x97\x80\xde\xf9\x27\x0f\x86\x25\x6e\x47\x5e\x6e\x49\xcb\x6d\x59\xb9\x35\x29\x77\xe6\xe4\x20\x25\x37\x13\xaf\x9e\x8c\x8c\xce\xbb\xd2\xf1\x89\xd9\xd8\x1c\xe3\x80\xa5\x29\xf0\x56\x9d\xf9\x73\xa6\x7b\x8b\x56\x34\x6a\x82\x75\xd5\xac\x75\xac\x59\xf5\x68\x92\x6f\x4b\xed\x1f\xc9\xec\xe6\x10\xc3\x1b\x03\xcf\xc3\xe1\x7e\xe2\x8e\xbc\x9f\x40\xe1\x82\x70\x78\x29\x60\xb6\xbf\x18\xb7\xb0\xae\x67\x97\x36\x0f\x47\x1b\xca\x1d\xc9\x7c\xce\xe9\x55\x06\x58\xab\xb0\x05\x46\x83\x9a\x8c\xae\x07\x2c\xeb\x76\x94\xf1\x11\x40\x5a\x36\x93\x39\xa9\x6b\xec\xdd\xbb\x4e\xee\x5f\x6d\x08\x3f\x6d\x3e\x7a\x9c\xe0\x9e\x4b\x6b\x3b\xee\x90\xbb\xcb\xe3\x1f\xc3\xcc\x10\x60\x62\x6f\x10\x36\x66\xa7\x76\x66\xd8\xb8\xcd\xf8\x28\x64\x8e\xbd\xa3\xb4\x4f\xe1\x8e\x5b\x8c\x5d\xca\xed\x3e\xa8\xd9\xbd\xb2\xe8\xd4\x8e\xb5\x47\xa6\xcd\xbf\x39\x6e\xd9\x6f\x6c\x94\xf2\xdb\xf4\x1e\xbd\x67\x75\x68\x6b\xf4\xc6\xb5\xa7\xe3\x22\x18\x5c\x16\x07\x97\x64\xde\x06\xf1\x0b\x6c\x20\x2f\x3b\x85\xbd\x08\xdb\x31\x79\x8e\xc6\xe3\xf8\xff\xc8\xac\x0b\xba\xfb\xcf\x47\xff\x51\xd6\x55\x63\xef\x6e\x7b\xa1\xe8\xeb\xd4\x51\x5a\xea\x89\x47\x98\xe6\x0b\x99\xc4\xed\x68\x9e\x3f\xf4\x76\xfb\xe9\xc4\x6f\x41\xdd\x98\x75\xb7\x87\xee\xce\x00\x7a\x7c\xe8\x75\xa3\x09\x0f\x20\x97\x4d\x9a\xe1\x01\x87\xf7\xa8\xee\x40\x3b\xe6\xa1\xfe\x3f\x2b\xd2\x4d\xc0\x06\x51\xf4\xff\x0f\x99\x0d\x9f\xf8\x14\x94\xe6\xf2\x17\x2c\xb5\x24\xfe\x28\x54\xbb\x1b\x41\x1b\xb4\xdb\xe8\x72\x2c\x10\x1d\xf7\x39\x24\x79\xb7\xb3\xf9\xdb\x81\x85\xbd\x17\xd0\xa3\x71\x77\xf8\xba\xdf\x05\x6e\xd4\x61\x53\x9d\xf5\xf3\xe6\x20\xd3\xb6\x84\xe3\x1d\xa1\xbd\x82\x0c\x23\xb7\xf7\xab\xfd\xff\x04\x00\x00\xff\xff\xde\xc1\x1e\x42\xa2\x22\x00\x00")

func templates_commands_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_commands_tmpl,
		"templates/commands.tmpl",
	)
}

var _templates_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x6e\xf2\x3a\x10\x5d\x27\x4f\xe1\x5a\xe2\x2a\xd6\xa5\x0e\x77\x77\x85\xc4\x02\x15\x68\x2b\xb5\x05\x01\xed\xb6\x72\x93\x49\xb0\xea\xd8\x91\x3d\x81\x4a\x15\xef\xfe\xc9\x89\xf9\x6d\x57\x1f\x9b\x78\x3c\x33\x67\xce\x9c\x19\x53\x8b\xec\x53\x94\x40\x2a\x21\x75\x1c\xcb\xaa\x36\x16\x49\x12\x13\x42\x08\x2d\x2a\xa4\xdd\x49\x99\x32\x9c\x6c\xa3\x51\x56\x10\x2c\xe3\xc2\xc1\xa1\x95\xba\x74\x34\x8e\x23\x5a\x4a\xdc\x34\x1f\x3c\x33\x55\x6a\x65\x09\x88\x32\x35\x35\x68\x51\xcb\xdb\x4c\xc9\xdb\x12\x34\x58\x81\xc6\xa6\x99\x92\x34\x66\x71\x5c\x34\x3a\x6b\x09\x24\x8c\x7c\xb7\x78\x99\xd1\x85\x2c\xc9\x70\x44\xfe\xc9\x94\xe4\x77\xad\xd9\xb9\xfc\x6f\x5c\xd7\x2f\xa2\x82\xa1\xaf\xfc\xfd\x4d\xb8\x37\xc8\x7e\x4f\xfb\xc7\x88\xa9\xde\x2e\x2c\x14\xf2\x6b\x78\x8a\x98\xea\xed\x65\xd0\x1b\x58\x27\x8d\x6e\x61\xfe\xe3\x03\x3e\x08\xbe\x7d\xc7\x41\x49\xfe\xa8\x25\x26\x1d\x19\x16\xb7\xb7\x39\x14\xa2\x51\xe8\x3c\x37\x1f\xf1\x02\xbb\x7b\x65\x3e\x84\x9a\x29\x51\x4e\x82\x33\xa1\x1b\xc4\x7a\x98\xa6\xca\x64\x42\x6d\x8c\xc3\xe1\xff\x83\xc1\x80\xb2\x16\xa2\x3c\xc6\xbb\xfe\x99\xb1\x02\xec\x13\xb0\xf6\x80\xfc\x2c\x3e\x61\xac\xf3\x85\xb0\x0e\x4e\x25\x5c\x72\x60\xd0\x81\xc9\xa2\xcd\xb9\x19\x11\x2d\x15\x39\x49\xa4\x4c\xc9\x67\x02\x85\x4a\xc0\x5a\x16\xda\x6a\x3f\x69\x4a\xd6\xf3\xc9\x7c\x48\xc6\x79\x4e\x2c\x94\xd2\x21\x58\x92\x99\xaa\x12\x3a\x77\x64\x03\x16\x78\x17\xe9\x81\x47\x47\x1d\xba\x21\x34\x56\xa0\x34\x3a\xf9\xa1\x2a\x29\x01\xd7\xf3\xe7\xa7\x99\x54\xb0\x10\xb8\x49\xa8\xf3\xa3\xf7\x4b\xc1\x7e\x75\x66\x16\xb0\xf3\x9d\x9a\xfb\x9b\x9e\x22\x4f\x70\x9c\xe7\x1d\xbf\xbb\xd0\x47\xe2\x6f\x97\xc6\x20\x3b\x06\x8c\x1b\xdc\xfc\xe2\x3e\x0e\xdb\x9b\x7c\xe1\x77\xc2\x21\x68\xec\xd4\x66\x3e\x33\x8c\x27\xb9\x18\x16\x0b\xa5\xdb\xb4\xe9\x17\x64\x0d\x42\xc2\xe2\x7d\xd8\xe7\xeb\x8e\x0b\xa9\x40\xfb\x3d\xed\x9e\x0a\x0b\xdf\xd0\x1e\xe8\xed\x9b\x50\x0d\xf8\xe1\x1b\xc7\xef\x01\x41\x6f\x93\xf0\xaa\xf8\xda\xbc\xd6\x35\xd8\xa4\xa8\x90\xaf\x6a\x2b\x35\x16\x09\xed\xb9\xf7\x9e\x7b\x5f\x8c\xd7\x0f\xb4\xff\x73\xc9\xc9\xa1\x1e\x63\x27\x51\x0f\x45\x6e\x46\x84\xd2\x33\x61\x2d\x60\x63\xf5\xd1\x7f\xf6\x08\x82\xe7\xaa\x70\xca\x7b\x2e\xed\x39\x8e\xa6\x52\xb4\x4f\x1a\x07\xf6\xc1\x54\x30\x91\x36\x61\x7d\x72\x62\xfd\x64\x76\x60\x7f\xac\x0a\x3b\x23\x77\x94\xeb\x02\xe3\xa4\x4d\x24\x0b\x12\xfe\x72\xf8\xfd\x7c\xbe\x22\xa3\x11\xa1\x3b\xa9\x73\xb3\x73\xbe\x83\x28\xda\x98\xea\x4a\x35\xfa\x30\x7f\x9e\x4e\x96\x8f\x6f\x53\xca\xc8\xbf\xd7\x8e\x56\x30\x16\x47\x1e\xb9\xcd\x1d\x05\x31\xa2\x80\x75\x01\xf5\xba\x9a\x2e\x17\xcb\xf9\xec\xf1\x69\xda\x26\xed\xe3\x28\x0a\x9a\xf8\xe0\xd8\x5f\x04\xfb\xaa\x0e\xf5\xbd\xfd\x09\x00\x00\xff\xff\x96\x9c\xfd\x63\x5e\x05\x00\x00")

func templates_main_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_main_tmpl,
		"templates/main.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"templates/commands.tmpl": templates_commands_tmpl,
	"templates/main.tmpl": templates_main_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"commands.tmpl": &_bintree_t{templates_commands_tmpl, map[string]*_bintree_t{
		}},
		"main.tmpl": &_bintree_t{templates_main_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
