package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _templates_commands_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x4b\x73\xdc\xb8\x11\x3e\x93\xbf\x02\xcb\xb2\xb7\x48\x7b\xcc\xf1\x6e\xb6\x72\x98\xec\xa4\x4a\x96\x1f\x72\x95\x25\x2b\x7a\xac\x0f\x8a\x2a\x86\xc8\x9e\x19\x94\x48\x80\x02\x41\x3d\x32\xcb\xff\x9e\x6a\x00\x24\xc1\x21\x67\x24\x39\xb9\xe4\x22\x51\x68\x00\xfd\xfe\xba\x1b\x9a\x4e\xc9\xbe\x48\x81\x2c\x81\x83\xa4\x0a\x52\x72\xf5\x40\x44\x01\x9c\x16\xec\x4d\x92\xb1\x37\x96\x20\x64\x4c\xde\x7f\x25\x47\x5f\xcf\xc8\x87\xf7\x9f\xcf\x62\x7f\x3a\x25\xa7\x00\x64\xa5\x54\x51\xce\xa6\xd3\x25\x53\xab\xea\x2a\x4e\x44\x3e\x95\x6c\x09\x4a\xb1\xe9\xe8\x2d\xbe\x5f\xd0\xe4\x9a\x2e\x81\xac\xd7\x24\x3e\x36\xdf\x47\x34\x07\x52\xd7\xbe\xcf\xf2\x42\x48\x45\x42\xdf\x5b\xaf\x09\x5b\x90\xf8\xb3\x5e\x28\xe3\x8f\xb9\x22\x75\x1d\x2c\x72\x15\xac\xd7\x04\x78\x8a\xdb\x37\x37\x9d\x2a\xc9\xf8\xb2\xc4\x8d\xa5\xf9\xdc\xb1\xf9\x8c\x69\x9e\x81\x62\x39\x38\xdb\x7c\x2f\x78\xaa\x2a\xd3\x24\x63\x41\x7f\x7f\x71\xbd\x9c\x82\x94\x42\x96\x1b\x04\x59\x4e\xff\x0d\x52\x64\x62\x39\xcd\xc4\x72\x83\x58\x16\x8b\x5f\xfe\x32\x4d\xc4\x95\xa4\xa3\x94\x5b\x56\x80\xd4\x14\x51\x5c\x2f\x63\xc6\xa7\xab\x5f\xb9\xe0\xd3\x25\x70\x95\x41\x4e\x79\x7c\xfb\x6b\xe0\x47\xbe\xbf\x5e\x93\x14\x16\x8c\x03\x09\x0a\x2a\x69\x5e\x06\x56\xf3\x37\x44\x52\xbe\x04\x12\x7f\x2d\x14\x13\x9c\x66\xc7\x9a\xac\xa9\x9a\xcc\x16\x04\x6e\x48\x7c\xf6\x50\x00\x09\xae\x84\xc8\x80\x72\x73\xd8\xf3\x92\x3c\x8d\x3f\x66\x74\x59\x86\x51\xfc\x4e\x88\x2c\x44\x73\xc5\xfb\x5f\x3e\x5b\xb7\x05\x13\xb2\xa0\x59\x09\x13\xa2\x09\xef\xa1\x4c\x24\xd3\x7c\x90\x18\x59\x0e\x90\x95\xd0\x67\xc3\xb8\xfa\xeb\x6f\x63\x4c\x3e\x23\x61\x84\xcb\xdb\xe7\x72\x58\x64\x82\x6e\xe1\xf1\xd1\x90\xc6\xb8\xc4\x4f\xe1\x33\xbc\xd1\x44\xdf\xc8\x85\x41\xf0\xc8\x7d\x6d\x80\xbe\xe9\xa2\xd0\xf1\xd9\x37\xca\x14\x48\xeb\xac\xa1\x33\xee\x28\x53\x6f\xf0\x7a\xb3\x6f\xbb\x63\x2c\xfd\x74\x85\x29\x66\xf8\xf7\x58\x26\x19\x8b\x4f\x41\xed\x57\xa5\x12\xb9\xe1\x91\xe4\x69\xe4\xfb\x1e\x5b\x10\x97\xef\x01\x2d\xed\x27\x59\xfb\x9e\x67\x42\x2d\x7e\xc7\x78\x7a\xdc\x1e\x6b\x36\x47\xbe\x57\xfb\x4e\x7a\xad\xd7\xe4\x05\x47\xf1\x66\x73\x12\x37\x79\x8f\x8b\xb4\x60\x7a\xed\x93\xd8\x58\x3d\xae\xae\x32\x96\x68\x9a\xf9\xec\x76\xf8\xb7\x54\x92\xe6\x70\x5d\x9f\x56\x57\x89\xc8\x73\xca\x53\x82\x21\xec\xfb\x8b\x8a\x27\x2e\x1d\xe4\x2d\x48\x14\xfb\xe2\x32\xa7\xc5\x85\x01\x89\x4b\xf3\x0b\x55\x91\xa0\x2a\xc9\xc7\xa8\x6b\xed\x2b\xeb\x91\x17\xa5\xbe\x48\x8b\x64\xef\xb4\xf1\x30\x7a\xce\xf3\x82\xb4\xf3\x7c\x30\xd3\xde\xb0\x77\x6c\xc6\xc4\xc4\xec\xaf\x64\xb6\xb1\xef\xfc\xe4\x4b\x4b\xaf\x27\x46\x9a\x26\x70\x6a\xdf\x18\xd6\x4a\x27\x0a\xc4\x27\xbc\x10\x05\xfc\xda\xfc\x65\x64\x9c\x4e\x49\xdf\xae\x75\x8d\xb1\xd1\xda\x54\xc3\x72\x13\x22\xbe\xe7\x5a\x70\xfc\x40\xd8\x32\x8e\x4f\xe0\xa6\x62\x12\xd2\x16\x5c\xfa\x37\x1b\x8b\x4c\x48\x2b\xb9\x09\x1c\xf2\x4a\xe3\x5b\xfc\x07\xfe\xb4\x20\xbd\x4f\xf9\x01\xbd\x85\x77\x22\x7d\x20\x75\x3d\x21\x57\xf8\x61\x2d\xda\x9c\x8e\x48\xf8\xaa\x43\xc0\x13\x28\x0b\xc1\x31\xd6\x91\xe9\x89\x76\xa4\x06\x01\x3c\xae\x21\xd9\x04\xeb\x8a\xf2\x34\x03\x79\x4c\xd5\x0a\xcd\xa3\x13\xe3\xc0\xac\x35\x59\xe3\x7b\x18\xf0\xa3\x61\xa5\xdd\xe9\x5e\x61\x6e\x30\x11\x5d\xd7\x24\x20\xaf\x89\x43\xf6\x3d\x0f\x13\xcb\xeb\xe2\x05\x73\xec\xa4\xe2\xfb\x82\x2f\xd8\x32\xfe\x04\xea\x58\x8a\x05\xcb\x20\x8c\xe2\xbd\x82\x9d\x9f\x7c\xc1\xed\x95\xcc\x70\xaf\x39\xf5\x3a\x30\x85\x52\xad\xb4\x6c\x16\x33\xac\xab\xd9\x84\xbc\xd0\x56\xd4\xae\x1e\xd8\x1f\xa5\xed\xd0\xdd\xec\x8c\x3f\x73\xac\x0e\x6a\xd5\xa0\xa2\x66\x37\xb7\xd6\x2d\xe3\x13\x28\x32\x9a\x40\x58\xc9\x4c\xe3\xc6\xf7\xf5\x77\xed\x48\x7b\xda\x1a\x69\xbd\xfe\x5e\x7f\xd7\x08\xd3\x91\x5a\x4f\x4f\xc8\x2f\x51\xc3\xba\x89\xd1\x3e\xd4\x78\x12\x6e\x1a\x73\xec\x67\x0c\xb8\x8a\x51\xcb\x43\x50\x2b\x81\x5b\xc2\x08\x03\x1e\x65\x88\xfc\x5e\xe6\x3d\x49\xe1\xa1\xbe\x37\x15\xc8\x87\x56\x61\x64\x3e\x27\x12\x6e\xe2\xbd\x34\xfd\x07\x92\x0c\x6a\x77\xb0\x39\xa2\x94\xd5\xc8\xad\x32\x0e\x83\x15\xd0\x14\xe4\x38\x87\x03\x4d\x7b\x0e\x8b\xce\x66\x8e\xc9\x1e\xa9\xe2\x5e\x3f\xd9\x66\x73\x62\x71\xf9\x13\x28\x24\xe9\x64\xf8\x93\x28\xa6\x32\x9d\xb6\x9b\x75\x4a\x33\x37\x71\xef\x5c\xf3\xd3\x9c\x34\x87\x8f\x58\xa6\xf1\x41\x2b\xe8\xf4\x0c\x43\xfb\x3e\xc1\xc0\x8b\x5c\xc5\xa7\x85\x64\x5c\x2d\xc2\xe0\xe5\xad\xb1\x87\x63\x89\xa8\xe5\xe2\x56\xf5\x11\x4b\x3f\xc5\xd4\xcf\x60\xd6\x58\xde\x1b\x86\xec\x28\x34\x59\xa3\x69\x7c\xfa\x69\x4e\x82\xc0\xda\x67\x54\xaa\x7d\xc1\x15\x70\xf5\x06\xad\xd9\xf4\x04\x87\x90\x32\x6a\x81\x2a\xc0\x92\x9e\x3e\xd8\x46\x02\xef\x8c\x3a\x51\x1c\x49\x30\x6b\x0c\x66\xbd\x83\x85\x90\x10\x3a\x90\x33\xb1\x6e\x9f\x20\xf3\xc8\xa4\x5a\x59\x68\x08\xc4\x98\x40\x89\xde\x8b\x30\x32\x18\x87\x8b\x3f\xcd\x09\x67\x99\x11\xdb\xd6\x3f\xce\xb2\x89\xf9\x61\x7a\xd9\xf8\x9b\xa4\x45\x08\x52\x4e\x48\x80\x29\x07\xa5\x22\x0b\xca\x32\x48\x75\xd4\x68\x99\xb0\x12\xa7\x90\x88\x14\xd2\x21\x02\xfb\x86\x1d\x4a\x12\x9f\x2a\xaa\xaa\x52\xcf\x1c\xbf\x93\xdf\xde\xbe\x35\x9c\xad\x30\x16\x12\xce\x79\x4e\x65\xb9\xa2\x59\x83\xea\xa1\x51\xe2\x67\xcb\x21\xfa\xdb\x40\xf4\xa7\xc8\xde\x5e\x9b\x61\xbd\x97\xf6\x6e\x57\x15\x6d\xeb\xda\xc4\xdc\x4e\x8b\x7c\xc0\x5f\x8b\x30\x38\x38\x3b\x3b\x26\x2f\xd3\x19\x79\x59\x06\x93\x4d\x05\xdb\x05\xed\xcf\xa8\xb5\x15\x5d\xa8\xae\x1a\x18\x47\xee\xe1\xd2\x36\x3f\xa2\xea\x8d\xe6\xc6\x92\xe6\x06\x57\xff\xc6\xf6\x73\x43\x33\xc1\xca\xa1\xe7\x08\xec\xb8\x41\x2e\x68\x02\xeb\x1a\x13\x28\x0e\x07\x9e\x8a\x5c\xf8\xb1\x48\xad\x2d\xd0\x93\x42\xdb\x62\xd8\xd8\x59\x8c\xbe\xd3\x7d\xa6\x06\x68\xb7\x75\x7d\x56\x2b\xd1\x76\x2d\xff\x8b\xa6\x22\x32\x5e\xd3\x86\xa2\x4a\x41\x5e\x28\x94\xee\xad\xef\x79\x0b\x21\x49\xb3\xf4\xbb\x96\xce\x48\x1f\xef\x99\xc5\xb2\x85\x3c\xbb\xeb\xf5\x6b\xdf\xc4\x45\xcf\x1c\x36\x76\xc7\xb4\xeb\x34\xf9\x6f\xf4\x1c\x28\x18\x39\x59\x33\x96\x07\xc3\xe8\xdf\x17\x55\x96\x12\x2e\x14\x49\x68\x96\x11\xeb\xa5\xb6\x59\x6c\xe2\x1f\x7f\x62\x32\xd3\x44\x55\x34\x23\x4e\xc8\x34\x94\x9c\xaa\x64\x65\x3a\x6c\xcf\xad\xcd\x7a\xdd\x3a\xfe\xd0\x7c\x37\xb5\xc9\x33\xb7\x19\x43\x99\xb8\xff\x04\x4a\x6f\xfa\x83\x66\x95\xc9\xef\x58\xe3\xe3\xbd\xb2\xc8\x78\x0a\x19\x24\xca\x20\xb8\x2d\x65\x7b\x59\x76\x8a\xf3\x38\xc7\xc9\xa2\x97\x13\xe3\xb6\x78\x8a\x31\x96\xa0\x48\x23\xf9\x2d\xca\x62\x0c\x61\x2d\xe1\x69\x92\x2b\xb7\x16\xda\x54\x98\x33\x04\x42\x2d\xdf\xc5\xe5\xd5\x83\x02\x9d\x4e\x1f\xee\x0b\x48\x14\xa4\xe4\x4f\x62\x4a\x0e\x09\x5e\xde\x60\xb6\x45\x13\x6b\xd3\x1f\x91\xf7\x9b\x95\xd0\xd8\x1e\x11\xab\x92\xad\xa4\x6d\x8d\x34\x54\x7b\x57\xdb\x07\x69\x44\xc2\x69\xd8\x9e\x6a\x4b\xe7\x06\xbb\x06\xd3\x4c\xd2\x92\x84\x72\xb4\x8f\x04\x9a\xac\x48\x0a\x25\x06\x27\x29\xf5\x55\x57\x90\xd0\xaa\x04\xf2\xb2\x24\xac\x34\xd0\x37\x70\xd9\x6e\x5b\xb4\x22\x3a\xc3\xb4\xe7\x79\x57\x12\xe8\x75\x47\x6b\xab\xb1\x57\xf7\x5b\x23\xfc\x4b\xb1\x1c\xe2\xd3\x0c\xa0\x08\xcd\x70\x9d\x51\xac\xc8\xaf\xcc\x3a\x24\x82\xa7\x2d\xe2\x22\x64\xda\x2c\xff\xfb\x7c\x67\x9a\xf7\x4d\x72\x04\x77\x61\x70\x48\xef\x59\x5e\xe5\xcd\x0d\x25\x81\xfb\x04\x20\x75\xab\x5f\x57\x26\x36\x50\x71\x63\x02\x3d\x81\x25\x2b\x11\xe9\xcb\xfe\xa8\x1a\x91\x50\x0a\xa1\xc8\x2b\xfd\x08\x14\xef\x1b\x92\x9e\x58\xf4\xba\x1d\x1c\x84\x50\x66\x1a\x2f\xfb\x23\x89\xdd\xf3\x73\xef\xb4\x56\xe7\xbc\x84\x59\x6f\x44\x31\x13\xa4\x1e\xf0\x0c\x21\x3e\xb3\x1d\xa1\xa1\x7c\x11\x7c\x39\xb3\x81\x2e\xaf\x53\x71\xc7\xc3\xd1\xb7\x8b\x89\xdf\x36\x26\xc3\x31\x69\x4e\x94\xac\xc0\x77\x2b\x69\x23\xbf\x9d\x2d\xe7\x1b\xbc\xdd\x1d\x28\x42\x9b\x6c\xbb\x64\xf0\x3d\xf3\x52\xa2\xfb\xb2\xde\x2b\x09\x7a\x17\x71\x68\xab\x45\x70\x43\xdf\x14\x78\x9e\xe8\x72\x40\x12\x90\x8a\x32\x4e\xe0\x16\xb8\x22\x42\xb6\x51\x8f\xcd\x16\x31\xbe\x66\x7c\xe9\x1a\x2c\x78\x97\x89\xe4\x1a\x43\x03\x92\x4a\x0b\x88\x76\xa8\x4a\x28\x49\x21\x4c\xbf\xa1\x04\x29\x40\x32\x91\x32\xc4\xdf\x07\x92\xac\x20\xb9\xfe\x01\x8e\xb5\x75\x38\x76\x96\x56\xb1\x10\xd5\xd9\x98\x94\xb6\x54\x61\xcf\xd4\x61\xfb\x74\xd3\x3c\xde\xe0\x36\x53\x30\x31\xe2\x4d\x76\x26\x79\xba\xc5\x84\x4e\x58\xc5\xe7\x65\x17\x3b\xed\x58\x10\xef\x65\x8c\xa2\xee\x6d\x62\xdb\x85\x19\xb9\xe8\x3d\x8c\x78\xbd\xb1\x66\x70\xca\xf3\x34\x0f\x87\xc1\x66\x9b\xde\xbc\x86\x8c\x10\xdc\x18\x6f\xdf\xbc\xec\xde\x6d\x51\xae\x43\xaf\x09\x6f\x14\x5b\x2e\xcb\x19\x31\x16\x38\x64\x1c\x61\xe0\x08\xd7\x10\x71\x32\xe0\x3b\xeb\x77\x73\xc7\x49\xc5\x67\x04\x8d\x1e\xa2\x45\xfb\x19\x3e\x21\x54\x2e\xcb\xd6\x28\x8d\x53\xdc\x7e\xf8\x89\x1d\xd3\x8b\xfb\xde\x64\xbc\x43\x2e\xe4\x78\x81\xb7\xde\x93\xba\xbe\x1c\x36\x16\x23\xbd\xb5\xe7\x79\x99\x58\xc6\x1f\xa9\xa2\x59\x18\x61\xa1\xc0\xb2\x14\xc5\x87\xe5\x32\x0c\x74\xd9\xd0\xed\x04\x46\x68\xd4\x78\xc5\x77\x9d\x63\xfe\xc2\x3d\x6e\xd4\xda\xd7\x45\x83\xec\x88\xad\x99\xae\x53\xcd\xd3\x75\xa7\x44\x33\x93\x85\x51\xff\xe1\xcb\x2d\x08\x4f\x7c\xff\xea\x87\xff\x78\xf4\x37\x8d\x0e\xdc\xd3\xbc\xc8\xa0\xb4\x4d\xa6\xdf\x6f\x77\xe0\x5e\xdf\xff\xa1\xd9\x64\xe3\xae\x3d\xf4\x7a\x4e\x02\xa2\x5f\x84\x5a\x64\xb3\x8a\x63\x7f\x1f\x46\xe4\x35\x09\xb4\x77\x5b\x79\x6d\x32\xe9\x45\x40\xef\xfc\x93\x07\xc3\xba\xb7\x23\x2f\xb7\xa4\xe5\xb6\xac\xdc\x9a\x94\x3b\x73\x72\x90\x92\x9b\x89\x57\x4f\x46\xe6\xe9\x5d\xe9\xf8\xc4\x6c\x6c\xd4\x38\x60\x69\x0a\xbc\x65\x67\xfe\x9c\xe9\x86\xa3\x25\x8d\x8a\x60\x5d\x35\x6b\x1d\x6b\x76\x3d\x9a\xe4\xdb\x52\xfb\x47\x32\xbb\x51\x62\xf8\x8c\xe0\x79\x38\xf1\x4f\xdc\x39\xf8\x13\x28\xdc\x10\x0e\x5f\x0a\xcc\xf5\x17\xe3\x12\xd6\xf5\xec\xd2\xe6\xe1\x68\x97\xb9\x23\x99\xcf\x39\xbd\xca\x00\x6b\x15\xf6\xc5\x28\x50\x93\xd1\xf5\x00\x65\xdd\x36\x33\x3e\x02\x48\xcb\x66\x5c\x27\x75\x8d\x0d\x7d\xd7\xde\xfd\xab\x0d\xe1\xa7\x0d\x4d\x8f\x03\xdc\x73\x61\x6d\xc7\xc3\x72\xf7\xa2\xfc\x63\x36\x33\x00\x98\xd8\x67\x85\x8d\x81\xaa\x1d\x24\x36\x9e\x38\x3e\x0a\x99\x63\x43\x29\xed\x57\xb8\xe3\x69\x63\x17\x73\x7b\x0f\x72\x76\xdf\x31\x3a\xb6\x63\xed\x91\xe9\xfd\x6f\x8e\x5b\xf4\x1b\x9b\xaf\xfc\x36\xbd\x47\x1f\x5f\x1d\xd8\x1a\x7d\x86\xed\xf1\xb8\x08\x06\x2f\xc8\xc1\x25\x99\xb7\x41\xfc\x02\x1b\xc8\xcb\x8e\x61\x2f\xc2\x76\x8c\xa3\xa3\xf1\x38\xfe\x8f\x33\xeb\x82\xee\x51\xf4\xd1\xff\x9e\x75\xd5\xd8\xbb\xdb\x5e\x28\xfa\x3c\x75\x94\x96\x7a\x0c\x12\xa6\xf9\x42\x24\x71\x3b\x9a\xe7\x4f\xc2\xdd\x7d\x3a\xf1\x5b\xa3\x6e\x0c\xc0\xdb\x43\x77\x67\x00\x3d\x3e\x09\xbb\xd1\x84\x0a\xc8\x65\x93\x66\xa8\xe0\xf0\x71\xd5\x9d\x72\xc7\x3c\xd4\xff\x0f\x46\xba\x69\xb0\x41\x14\xfd\xff\x9b\xcc\x86\x4f\x7c\x0a\x4a\x63\xf9\x0b\x96\x5a\x10\x7f\xd4\x54\xbb\x1b\x41\x1b\xb4\xdb\xe0\x72\x2c\x10\x1d\xf7\x39\x20\x79\xb7\xb3\xf9\xdb\x61\x0b\xfb\x58\xa0\xe7\xe5\x4e\xf9\xba\xdf\x05\x6e\xd4\x61\x53\x9d\xf5\xf7\xe6\x20\xd3\xb6\x84\xe3\x1d\xa1\x7d\x97\x0c\x23\xb7\xf7\xb3\xd3\xb7\x5f\xfb\xff\x09\x00\x00\xff\xff\xac\xd9\xbd\x05\xcd\x22\x00\x00")

func templates_commands_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_commands_tmpl,
		"templates/commands.tmpl",
	)
}

var _templates_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x41\x6f\xf2\x38\x10\x3d\x27\xbf\xc2\x9f\x25\x56\xb1\x96\xcf\x61\x6f\x2b\x24\x0e\x6c\x81\xb6\x52\x5b\x10\xd0\x5e\x2b\x37\x99\x04\xab\x8e\x1d\xd9\x13\xa8\x54\xf1\xdf\x57\x4e\x0c\x01\xba\xa7\xe5\x12\xdb\x33\x7e\xf3\xde\x9b\x31\xb5\xc8\x3e\x45\x09\xe4\xfb\x9b\xf0\x55\xb7\x7e\x11\x15\x90\xe3\x31\x8e\x65\x55\x1b\x8b\x24\x89\x09\x21\x84\x16\x15\xd2\x6e\xa5\x4c\x19\x56\xb6\xd1\x28\x2b\x08\x3b\xe3\xc2\xc2\xa1\x95\xba\x74\x34\x8e\x23\x5a\x4a\xdc\x35\x1f\x3c\x33\x55\x6a\x65\x09\x88\x32\x35\x35\x68\x51\xcb\xdf\x99\x92\xbf\x4b\xd0\x60\x05\x1a\x9b\x66\x4a\xd2\x98\xc5\x71\xd1\xe8\x8c\x54\x42\xea\x84\x91\xef\x16\x2f\x33\xba\x90\x25\x19\x4f\xc8\x1f\x99\x92\xfc\xae\xdd\x76\x21\xff\x9b\xd6\xb5\xa7\x3c\xf6\x95\xbd\x8c\xc0\x9f\x0e\xcf\x19\x73\xbd\x5f\x59\x28\xe4\xd7\xb8\xcf\x98\xeb\xfd\x75\xd2\x1b\x58\x27\x8d\x6e\x61\xfe\xe2\x23\x3e\x0a\xb1\x63\xc7\x41\x49\xfe\xa8\x25\x26\x1d\x19\x16\xb7\xa7\x39\x14\xa2\x51\xe8\x3c\x37\x9f\xf1\x02\x87\x7b\x65\x3e\x84\x5a\x28\x51\xce\x42\x30\xa1\x3b\xc4\x7a\x9c\xa6\xca\x64\x42\xed\x8c\xc3\xf1\xdf\xa3\xd1\x88\xb2\x16\xa2\x3c\xe7\xbb\xe1\xc5\x66\x03\x38\x24\x60\xed\x09\xf9\x59\x7c\xc2\x54\xe7\x2b\x61\x1d\xf4\x25\x5c\x72\x62\xd0\x81\xc9\xa2\xbd\xf3\x6b\x42\xb4\x54\xa4\xb7\x48\x99\x92\x2f\x04\x0a\x95\x80\xb5\x2c\xc8\x6a\x3f\x69\x4a\xb6\xcb\xd9\x72\x4c\xa6\x79\x4e\x2c\x94\xd2\x21\x58\x92\x99\xaa\x12\x3a\x77\x64\x07\x16\x78\x97\xe9\x81\x27\x67\x1f\xba\x26\x34\x56\xa0\x34\x3a\xf9\xe1\x2a\x29\x01\xb7\xcb\xe7\xa7\x85\x54\xb0\x12\xb8\x4b\xa8\xf3\xad\xf7\x43\xc1\xfe\x33\x98\x59\xc0\x2e\xd6\x8b\xfb\x3f\x9a\x22\x4f\x70\x6d\x0c\xf2\x69\x9e\xdf\x75\x32\x12\x7f\xf6\x4f\x23\x55\x3e\x6d\x70\x17\x0e\x5d\xc2\x86\xe4\x1c\xe8\xe4\xf4\xa1\xd0\xdf\x33\xd8\xca\x0f\x87\x43\xd0\xd8\xd9\xce\x3c\x7c\xe8\x53\x72\xd5\x35\x76\xc9\x61\xfe\x05\x59\x83\x90\xb0\xf8\x18\x06\xfb\x56\x7a\x21\x15\x68\x3f\xb0\xdd\x9b\x61\xe1\x1b\x74\x82\xde\xbf\x09\xd5\x80\x9f\x02\xe3\xf8\x3d\x20\xe8\x7d\x12\x9e\x17\xdf\x9a\xd7\xba\x06\x9b\x14\x15\xf2\x4d\x6d\xa5\xc6\x22\xa1\x03\xf7\x3e\x70\xef\xab\xe9\xf6\x81\x0e\x7f\x4e\x3b\x39\xd5\x63\xac\x77\xf7\x54\xe4\xd7\x84\x50\x7a\xe1\xb0\x05\x6c\xac\x3e\xc7\x2f\x5e\x43\x88\xdc\x14\x4e\xf9\xc0\xa5\x03\xc7\xd1\x54\x8a\x0e\x49\xe3\xc0\x3e\x98\x0a\x66\xd2\x7a\xaf\x7b\xd6\x4f\xe6\x00\xf6\xc7\xcc\xb0\x0b\x72\x67\xbb\xae\x30\x7a\x6f\x22\x59\x90\xf0\xdf\xc3\xef\x97\xcb\x0d\x99\x4c\x08\x3d\x48\x9d\x9b\x83\xf3\x0a\xa2\x68\x67\xaa\x1b\xd7\xe8\xc3\xf2\x79\x3e\x5b\x3f\xbe\xcd\x29\x23\x7f\xde\x06\x5a\xc3\x58\x1c\x79\xe4\xf6\xee\x24\x98\x11\x05\xac\x2b\xa8\xd7\xcd\x7c\xbd\x5a\x2f\x17\x8f\x4f\xf3\xf6\xd2\x31\x8e\xa2\xe0\x89\x4f\x8e\xfd\x41\xd8\xdf\xd4\xa1\x5e\xdb\xbf\x01\x00\x00\xff\xff\x12\x5f\xf3\xf2\x75\x05\x00\x00")

func templates_main_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_main_tmpl,
		"templates/main.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"templates/commands.tmpl": templates_commands_tmpl,
	"templates/main.tmpl": templates_main_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"commands.tmpl": &_bintree_t{templates_commands_tmpl, map[string]*_bintree_t{
		}},
		"main.tmpl": &_bintree_t{templates_main_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
