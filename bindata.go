package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _templates_commands_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x73\xdb\xb8\x11\x7f\x26\xff\x0a\x1c\x27\xb9\x21\x13\x85\xca\x5d\x6f\xfa\xa0\x9e\x3a\xe3\x38\x1f\xce\x4c\xec\xb8\xfe\xb8\x3c\xb8\x9e\x06\x26\x57\x12\xc6\x20\x40\x83\x90\x3f\xaa\xe3\xff\xde\x59\x00\xa4\x40\x91\x92\xed\xb4\x2f\x7d\x49\x28\x2c\x80\xfd\xfe\xed\x2e\x3c\x1e\x93\x7d\x99\x03\x99\x83\x00\x45\x35\xe4\xe4\xea\x81\xc8\x12\x04\x2d\xd9\x9b\x8c\xb3\x37\x8e\x20\x55\x4a\xde\x7f\x25\x47\x5f\xcf\xc8\x87\xf7\x9f\xcf\xd2\x70\x3c\x26\xa7\x00\x64\xa1\x75\x59\x4d\xc6\xe3\x39\xd3\x8b\xe5\x55\x9a\xc9\x62\xac\xd8\x1c\xb4\x66\xe3\xc1\x5b\xc2\xb0\xa4\xd9\x35\x9d\x03\x59\xad\x48\x7a\x6c\xbf\x8f\x68\x01\xa4\xae\xc3\x90\x15\xa5\x54\x9a\xc4\x61\xb0\x5a\x11\x36\x23\xe9\x67\xb3\x50\xa5\x1f\x0b\x4d\xea\x3a\x9a\x15\x3a\x5a\xad\x08\x88\x1c\xb7\x6f\x6e\x3a\xd5\x8a\x89\x79\x85\x1b\x2b\xfb\xb9\x63\xf3\x19\x33\x3c\x23\xcd\x0a\xf0\xb6\x85\x41\xf4\x54\x55\xc6\x19\x67\x51\x77\x7f\x79\x3d\x1f\x83\x52\x52\x55\x1b\x04\x55\x8d\xff\x0d\x4a\x72\x39\x1f\x73\x39\xdf\x20\x56\xe5\xec\x97\xbf\x8c\x33\x79\xa5\xe8\x20\xe5\x96\x95\xa0\x0c\x45\x96\xd7\xf3\x94\x89\xf1\xe2\x57\x21\xc5\x78\x0e\x42\x73\x28\xa8\x48\x6f\x7f\x8d\xc2\x24\x0c\x57\x2b\x92\xc3\x8c\x09\x20\x51\x49\x15\x2d\xaa\xc8\x69\xfe\x86\x28\x2a\xe6\x40\xd2\xaf\xa5\x66\x52\x50\x7e\x6c\xc8\x86\x6a\xc8\x6c\x46\xe0\x86\xa4\x67\x0f\x25\x90\xe8\x4a\x4a\x0e\x54\xd8\xc3\x41\x90\x15\x79\xfa\x91\xd3\x79\x15\x27\xe9\x3b\x29\x79\x8c\xe6\x4a\xf7\xbf\x7c\x76\x6e\x8b\x46\x64\x46\x79\x05\x23\x62\x08\xef\xa1\xca\x14\x33\x7c\x90\x98\x38\x0e\xc0\x2b\xe8\xb2\x61\x42\xff\xf5\xb7\x21\x26\x9f\x91\x30\xc0\xe5\xed\x73\x39\xcc\xb8\xa4\x5b\x78\x7c\xb4\xa4\x21\x2e\xe9\x53\xf8\xf4\x6f\xb4\xd1\x37\x70\x61\x14\x3d\x72\x5f\x1b\xa0\x6f\xd6\x51\xe8\xf9\xec\x1b\x65\x1a\x94\x73\x56\xdf\x19\x77\x94\xe9\x37\x78\xbd\xdd\xb7\xdd\x31\x8e\x7e\xba\xc0\x14\xb3\xfc\x3b\x2c\x33\xce\xd2\x53\xd0\xfb\xcb\x4a\xcb\xc2\xf2\xc8\x8a\x3c\x09\xc3\x80\xcd\x88\xcf\xf7\x80\x56\xee\x93\xac\xc2\x20\xb0\xa1\x96\xbe\x63\x22\x3f\x6e\x8f\x35\x9b\x93\x30\xa8\x43\x2f\xbd\x56\x2b\xf2\x42\xa0\x78\x93\x29\x49\x9b\xbc\xc7\x45\x5a\x32\xb3\xf6\x49\x6e\xac\x1e\x2f\xaf\x38\xcb\x0c\xcd\x7e\x76\x77\x64\xb2\x28\xa8\xc8\x8f\x9a\x3b\xf7\xbd\xdf\xc8\xf0\x96\x2a\xd2\xdc\x5f\xd7\xa7\xcb\x2b\x77\x80\x60\x94\x87\xe1\x6c\x29\x32\x9f\x0e\xea\x16\x14\x6a\x76\x71\x59\xd0\xf2\xc2\xe2\xc8\xa5\xfd\x0f\xb5\x55\xa0\x97\x4a\x0c\x51\x57\xc6\x9d\xce\x69\x2f\x2a\x73\x91\x91\xc8\xdd\xe9\x42\x66\xf0\x5c\x10\x44\xf9\x3a\x38\xa2\x89\x71\x98\xbb\x63\x33\x6c\x46\x76\xff\x52\xf1\x8d\x7d\xe7\x27\x5f\x5a\x7a\x3d\xb2\xd2\x34\xb1\x55\x87\xd6\xf6\x4e\x3a\x59\x22\x84\xe1\x85\x28\xe0\xd7\xe6\x97\x95\x71\x3c\x26\x5d\xd3\xd7\x35\x86\x4f\x6b\x76\x83\xdc\x4d\x14\x85\x81\x6f\xc1\xe1\x03\x71\xcb\x38\x3d\x81\x9b\x25\x53\x90\xb7\xf8\xd3\xbd\xd9\x5a\x64\x44\x5a\xc9\x6d\x6c\x91\x57\x06\x02\xd3\x3f\xf0\x5f\x87\xe3\xfb\x54\x1c\xd0\x5b\x78\x27\xf3\x07\x52\xd7\x23\x72\x85\x1f\xce\xa2\xcd\xe9\x84\xc4\xaf\xd6\x20\x79\x02\x55\x29\x05\xa6\x03\x32\x3d\x31\x8e\x34\x38\x81\xc7\x0d\x6a\xdb\x78\x5e\x50\x91\x73\x50\xc7\x54\x2f\xd0\x3c\x26\x77\x0e\xec\x5a\x93\x58\x61\x80\x39\x31\x18\x56\xc6\x9d\xfe\x15\xf6\x86\x4e\x9c\xd6\x35\x89\xc8\x6b\xe2\xed\x0a\x83\x00\x53\x30\x58\x87\x0d\x66\xe3\xc9\x52\xec\x4b\x31\x63\xf3\xf4\x13\xe8\x63\x25\x67\x8c\x43\x9c\xa4\x7b\x25\x3b\x3f\xf9\x82\xdb\x97\x8a\xe3\x5e\x7b\xea\x75\x64\x4b\xaa\x5e\x18\x11\x1d\xba\x38\x8f\xb3\x11\x79\x61\x8c\x69\x3c\xde\x73\x03\x0a\xbd\xae\x03\x76\x67\xfa\x59\x60\x1d\xd1\x8b\x06\x3f\x0d\xbb\xa9\x33\x72\x95\x9e\x40\xc9\x69\x06\xf1\x52\x71\x83\x30\xdf\x57\xdf\x8d\x3f\xdd\x69\xa7\xe9\x6a\xf5\xbd\xfe\x6e\xb0\x68\x4d\x6a\x1d\x3e\x22\xbf\x24\x0d\xeb\x26\x54\xbb\xa0\x14\x28\xb8\x69\xcc\xb1\xcf\x19\x08\x9d\xa2\x96\x87\xa0\x17\x12\xb7\xc4\x09\xc6\x3d\xca\x90\x84\x9d\x04\x7c\x92\xc2\x7d\x7d\x6f\x96\xa0\x1e\x5a\x85\x91\xf9\x94\x28\xb8\x49\xf7\xf2\xfc\x1f\x48\xb2\xf8\xbe\x06\xd8\x01\xa5\x9c\x46\x7e\x3d\xf2\x18\x2c\x80\xe6\xa0\x86\x39\x1c\x18\xda\x73\x58\xac\x6d\xe6\x99\xec\x91\x7a\x1f\x74\x73\x6e\x32\x25\x0e\xc1\x3f\x81\x46\x92\xc9\x89\x3f\x89\x66\x9a\x9b\xec\xdd\xac\x68\x86\xb9\x0d\x7f\xef\x9a\x9f\xa6\xa4\x39\x7c\xc4\xb8\x81\x09\xa3\xa0\xd7\x5d\xf4\xed\xfb\x04\x03\xcf\x0a\x9d\x9e\x96\x8a\x09\x3d\x8b\xa3\x97\xb7\xd6\x1e\x9e\x25\x92\x96\x8b\x5f\xff\x07\x2c\xfd\x14\x53\x3f\x83\x59\x63\xf9\xa0\x1f\xb2\x83\x08\xe5\x8c\x66\x60\xea\xa7\x29\x89\x22\x67\x9f\x41\xa9\xf6\xa5\xd0\x20\xf4\x1b\xb4\x66\xd3\x3d\x1c\x42\xce\xa8\xc3\xab\x08\x8b\x7f\xfe\xe0\x5a\x0e\xbc\x33\x59\x8b\xe2\x49\x82\x59\x63\xa1\xeb\x1d\xcc\xa4\x82\xd8\x83\x9c\x91\x73\xfb\x08\x99\x27\x36\xd5\xaa\xd2\x20\x21\xc6\x04\x4a\xf4\x5e\xc6\x89\x85\x3a\x5c\xfc\x69\x4a\x04\xe3\x56\x6c\x57\x06\x05\xe3\x23\xfb\x8f\xed\x7a\xd3\x6f\x8a\x96\x31\x28\x35\x22\x11\xa6\x1c\x54\x9a\xcc\x28\xe3\x90\x9b\xa8\x31\x32\x61\x41\xce\x21\x93\x39\xe4\x7d\x20\x0e\x2d\x3b\x94\x24\x3d\xd5\x54\x2f\x2b\x33\x9d\xfc\x4e\x7e\x7b\xfb\xd6\x72\x76\xc2\x38\x48\x38\x17\x05\x55\xd5\x82\xf2\x06\xdc\x63\xab\xc4\xcf\x8e\x43\xf2\xb7\x9e\xe8\x4f\x91\xbd\xbd\x96\x63\xd9\x57\xee\x6e\x5f\x15\x63\xeb\xda\xc6\xdc\x4e\x8b\x7c\xc0\xff\x66\x71\x74\x70\x76\x76\x4c\x5e\xe6\x13\xf2\xb2\x8a\x46\x9b\x0a\xb6\x0b\xc6\x9f\x49\x6b\x2b\x3a\xd3\xeb\x6a\x60\x1d\xb9\x87\x4b\xdb\xfc\x88\xaa\x37\x9a\x5b\x4b\xda\x1b\x7c\xfd\x1b\xdb\x4f\x2d\xcd\x06\xab\x80\x8e\x23\xb0\x37\x07\x35\xa3\x19\xac\x6a\x4c\xa0\x34\xee\x79\x2a\xf1\xe1\xc7\x21\xb5\xb1\x40\x47\x0a\x63\x8b\x7e\x0b\xe8\x30\xfa\xce\x74\xa4\x06\xa0\xfd\x26\xf7\x59\x1d\x45\xdb\xbc\xfc\x2f\x7a\x8b\xc4\x7a\xcd\x18\x8a\x6a\x0d\x45\xa9\x51\xba\xb7\x61\x10\xcc\xa4\x22\xcd\xd2\xef\x46\x3a\x2b\x7d\xba\x67\x17\xab\x16\xf2\xdc\xae\xd7\xaf\x43\x1b\x17\x1d\x73\xb8\xd8\x1d\xd2\x6e\xad\xc9\x7f\xa3\x67\x4f\xc1\xc4\xcb\x9a\xa1\x3c\xe8\x47\xff\xbe\x5c\xf2\x9c\x08\xa9\x49\x46\x39\x27\xce\x4b\x6d\xcf\xd8\xc4\x3f\xfe\x8b\xc9\x4c\x33\xbd\xa4\x9c\x78\x21\xd3\x50\x0a\xaa\xb3\x85\x6d\xb4\x03\xbf\x36\x9b\x75\xe7\xf8\x43\xfb\xdd\xd4\xa6\xc0\xde\x66\x0d\x65\xe3\xfe\x13\x68\xb3\xe9\x0f\xca\x97\x36\xbf\x53\x83\x8f\xf7\xda\x21\xe3\x29\x70\xc8\xb4\x45\x70\x57\xca\xf6\x38\x3f\xc5\xc9\x5d\xe0\x0c\xd2\xc9\x89\x61\x5b\x3c\xc5\x18\x73\xd0\xa4\x91\xfc\x16\x65\xb1\x86\x70\x96\x08\x0c\xc9\x97\xdb\x08\x6d\x2b\xcc\x19\x02\xa1\x91\xef\xe2\xf2\xea\x41\x83\x49\xa7\x0f\xf7\x25\x64\x1a\x72\xf2\x27\xb1\x25\x87\x44\x2f\x6f\x30\xdb\x92\x91\xb3\xe9\x8f\xc8\xfb\xcd\x49\x68\x6d\x8f\x88\xb5\x54\xad\xa4\x6d\x8d\xb4\x54\x77\x57\xdb\x07\x19\x44\xc2\xb9\xd9\x9d\x6a\x4b\xe7\x06\xbb\x06\xd3\x6c\xd2\x92\x8c\x0a\xb4\x8f\x02\x9a\x2d\x48\x0e\x15\x06\x27\xa9\xcc\x55\x57\x90\xd1\x65\x05\xe4\x65\x45\x58\x65\xa1\xaf\xe7\xb2\xdd\xb6\x68\x45\xf4\xc6\xee\x20\x08\xae\x14\xd0\xeb\x35\xad\xad\xc6\x41\xdd\x6d\x8d\xf0\x97\x66\x05\xa4\xa7\x1c\xa0\x8c\xed\x18\xce\x29\x56\xe4\x57\x76\x1d\x32\x29\xf2\x16\x71\x11\x32\x5d\x96\xff\x7d\xba\x33\xcd\xbb\x26\x39\x82\xbb\x38\x3a\xa4\xf7\xac\x58\x16\xcd\x0d\x15\x81\xfb\x0c\x20\xf7\xab\xdf\xba\x4c\x6c\xa0\xe2\xc6\x20\x7a\x02\x73\x56\x21\xd2\x57\xdd\x89\x35\x21\xb1\x92\x52\x93\x57\xe6\xb9\xa8\x99\x76\xcd\xe0\x62\xd6\xdd\xe0\x20\xa5\xb6\x73\x7b\xd5\x9d\x4c\xdc\x9e\x9f\x3b\xa7\x8d\x3a\xe7\x15\xd8\x71\x72\x63\x82\xb6\xf3\xa4\x19\xf7\x1c\xfd\xcc\x35\x86\x96\xf2\x45\x8a\xf9\xc4\xc5\xbb\xba\xce\xe5\x9d\x88\x07\x1f\x3b\x46\x61\xdb\x9f\xf4\x87\xa6\x29\xd1\x6a\x09\xa1\x5f\x50\x1b\x35\xdc\xa4\x39\xdd\xe0\xed\xef\x40\x11\xda\x9c\xdb\x25\x43\x18\xd8\xa7\x15\xd3\x9e\x75\x9e\x55\xd0\xc9\x08\x47\x5b\x0d\x83\x1b\xba\xa6\xc0\xf3\xc4\x54\x05\x92\x81\xd2\x94\x09\x02\xb7\x20\x34\x91\xaa\x0d\x7e\xec\xb9\x88\x75\x39\x13\x73\xdf\x60\xd1\x3b\x2e\xb3\x6b\x8c\x10\xc8\x96\x46\x40\xb4\xc3\xb2\x82\x8a\x94\xd2\xb6\x1d\x5a\x92\x12\x14\x93\x39\x43\x18\x7e\x20\xd9\x02\xb2\xeb\x1f\xe0\x58\x3b\xbf\x63\x83\xe9\x14\x8b\x51\x9d\x8d\x81\x69\x4b\x31\x0e\x6c\x39\x76\x6f\x3d\xcd\x6b\x0f\x6e\xb3\x75\x13\x03\xdf\x26\x69\x56\xe4\x5b\x4c\xe8\x47\xd7\x79\xb5\x8e\x9d\x76\x3a\x48\xf7\x38\xa3\xa8\x7b\x9b\xdf\x6e\x61\x42\x2e\x3a\xcf\x24\x41\x67\xba\xe9\x9d\x0a\x02\xc3\xc3\x63\xb0\xd9\xad\x37\x6f\x23\x03\x04\x3f\xc6\xdb\x47\x32\xb7\x77\x5b\x94\x9b\xd0\x6b\xc2\x1b\xc5\x56\xf3\x6a\x42\xac\x05\x0e\x99\x40\x34\x38\xc2\x35\x04\x1e\x0e\x62\x67\x19\x6f\xee\x38\x59\x8a\x09\x41\xa3\xc7\x68\xd1\x6e\xa2\x8f\x08\x55\xf3\xaa\x35\x4a\xe3\x14\xbf\x2d\x7e\x62\xe3\xf4\xe2\xbe\x33\x20\xef\x90\x0b\x39\x5e\xe0\xad\xf7\xa4\xae\x2f\xfb\xfd\xc5\x40\x8b\x1d\x04\x01\x97\xf3\xf4\x23\xd5\x94\xc7\x09\xd6\x0b\xac\x4e\x49\x7a\x58\xcd\xe3\xc8\x54\x0f\xd3\x55\x60\x84\x26\x8d\x57\x42\xdf\x39\xf6\x17\xee\xf1\xa3\xd6\x3d\x47\x5a\x80\x47\x88\xe5\xa6\x5c\x35\x6f\xdd\x6b\x25\x9a\xd1\x2c\x4e\xba\xcf\x60\x7e\x5d\x78\xe2\x6b\x58\x37\xfc\x87\xa3\xbf\xe9\x77\xe0\x9e\x16\x25\x87\xca\xf5\x9a\x61\xb7\xeb\x81\x7b\x73\xff\x87\x66\x93\x8b\xbb\xf6\xd0\xeb\x29\x89\x88\x79\x18\x6a\x91\xcd\x29\x8e\x6d\x7e\x9c\x90\xd7\x24\x32\xde\x6d\xe5\x75\xc9\x64\x16\x01\xbd\xf3\x4f\x11\xf5\xcb\xdf\x8e\xbc\xdc\x92\x96\xdb\xb2\x72\x6b\x52\xee\xcc\xc9\x5e\x4a\x6e\x26\x5e\x3d\x1a\x18\xab\x77\xa5\xe3\x13\xb3\xb1\x51\xe3\x80\xe5\x39\x88\x96\x9d\xfd\x39\x31\x7d\x47\x4b\x1a\x14\xc1\xb9\x6a\xd2\x3a\xd6\xee\x7a\x34\xc9\xb7\xa5\xf6\x8f\x64\x76\xa3\x44\xff\x35\x21\x08\x70\xf0\x1f\xf9\xe3\xf0\x27\xd0\xb8\x21\xee\x3f\x18\xd8\xeb\x2f\x86\x25\xac\xeb\xc9\xa5\xcb\xc3\xc1\x66\x73\x47\x32\x9f\x0b\x7a\xc5\x01\x6b\x15\xb6\xc7\x28\x50\x93\xd1\x75\x0f\x65\xfd\x6e\x33\x3d\x02\xc8\xab\x66\x6a\x27\x75\x8d\x7d\xfd\xba\xcb\xfb\x57\x1b\xc2\x4f\x9b\x9d\x1e\x07\xb8\xe7\xc2\xda\x8e\x67\xe6\xf5\xfb\xf2\x8f\xd9\xcc\x02\x60\xe6\x5e\x17\x36\xe6\xaa\x76\x9e\xd8\x78\xe9\xf8\x28\x55\x81\x7d\xa5\x72\x5f\xf1\x8e\x17\x8e\x5d\xcc\xdd\x3d\xc8\xd9\x7f\xce\x58\xb3\x1d\x6a\x8f\xec\x08\x70\x73\xdc\xa2\xdf\xd0\x98\x15\xb6\xe9\x3d\xf8\x06\xeb\xc1\xd6\xe0\x6b\x6c\x87\xc7\x45\xd4\x7b\x48\x8e\x2e\xc9\xb4\x0d\xe2\x17\xd8\x40\x5e\xae\x19\x76\x22\x6c\xc7\x54\x3a\x18\x8f\xc3\x7f\x69\x73\x2e\x58\xbf\x8d\x3e\xfa\xe7\xb6\x75\x35\x0e\xee\xb6\x17\x8a\x2e\x4f\x13\xa5\x95\x99\x86\xa4\x6d\xbe\x10\x49\xfc\x8e\xe6\xf9\x03\xf1\xfa\x3e\x93\xf8\xad\x51\x37\xe6\xe0\xed\xa1\xbb\x33\x80\x1e\x1f\x88\xfd\x68\x42\x05\xd4\xbc\x49\x33\x54\xb0\xff\xc6\xea\x0f\xbb\x43\x1e\xea\xfe\x21\x23\xdf\x34\x58\x2f\x8a\xfe\xff\x4d\xe6\xc2\x27\x3d\x05\x6d\xb0\xfc\x05\xcb\x1d\x88\x3f\x6a\xaa\xdd\x8d\xa0\x0b\xda\x6d\x70\x39\x14\x88\x9e\xfb\x3c\x90\xbc\xdb\xd9\xfc\xed\xb0\x85\x7b\x33\x30\x63\xf3\x5a\xf9\xba\xdb\x05\x6e\xd4\x61\x5b\x9d\xcd\xf7\xe6\x20\xd3\xb6\x84\xc3\x1d\xa1\x7b\x9e\x8c\x13\xbf\xf7\x73\x43\x78\x58\x87\xff\x09\x00\x00\xff\xff\xc5\x9c\xcf\x36\xfe\x22\x00\x00")

func templates_commands_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_commands_tmpl,
		"templates/commands.tmpl",
	)
}

var _templates_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\xea\x3a\x10\x5d\x27\x5f\xe1\x5a\xe2\xc9\xd6\xa3\x0e\x6f\xf7\x84\xc4\x82\x5b\xa0\xad\xd4\x96\x08\x68\xb7\x95\x9b\x4c\x82\x55\xc7\x8e\x6c\x07\x2a\x55\xfc\xfb\x95\x13\x43\x80\xde\xd5\x65\x13\xdb\x67\x7c\xe6\xcc\x99\x31\x35\xcf\x3e\x79\x09\xe8\xfb\x1b\xb1\xb4\x5b\xbf\xf0\x0a\xd0\xe1\x10\xc7\xa2\xaa\xb5\x71\x88\xc4\x08\x21\x84\x8b\xca\xe1\x6e\x25\x75\x19\x56\xa6\x51\x4e\x54\x10\x76\xda\x86\x85\x75\x46\xa8\xd2\xe2\x38\x8e\x70\x29\xdc\xb6\xf9\x60\x99\xae\x12\x23\x4a\x70\x4e\x24\xba\x06\xc5\x6b\x71\x9b\x49\x71\x5b\x82\x02\xc3\x9d\x36\x49\x26\x05\x8e\x69\x1c\x17\x8d\xca\x50\xc5\x85\x22\x14\x7d\xb7\x7c\x99\x56\x85\x28\xd1\x78\x82\xfe\xc9\xa4\x60\x77\xed\xb6\x83\xfc\x6f\x5a\xd7\x5e\xf2\xd8\x67\xf6\x65\x04\xfd\x78\x78\x8a\x98\xab\x5d\x6a\xa0\x10\x5f\xe3\x3e\x62\xae\x76\x97\x41\x6f\x60\xac\xd0\xaa\xa5\xf9\x8f\x8d\xd8\x28\x60\x87\x4e\x83\x14\xec\x51\x09\x47\x3a\x31\x34\x6e\x4f\x73\x28\x78\x23\x9d\xf5\xda\x7c\xc4\x0b\xec\xef\xa5\xfe\xe0\x72\x21\x79\x39\x0b\x20\xc1\x5b\xe7\xea\x71\x92\x48\x9d\x71\xb9\xd5\xd6\x8d\xff\x1f\x8d\x46\x98\xb6\x14\xe5\x29\xde\x0e\xcf\x36\x6b\x70\x43\x04\xc6\x1c\x99\x9f\xf9\x27\x4c\x55\x9e\x72\x63\xa1\x4f\x61\xc9\x51\x41\x47\x26\x8a\xf6\xce\xcd\x04\x29\x21\x51\x6f\x91\xd4\x25\x5b\x70\xc7\x25\x01\x63\x68\x28\xab\xfd\x24\x09\xda\x2c\x67\xcb\x31\x9a\xe6\x39\x32\x50\x0a\xeb\xc0\xa0\x4c\x57\x15\x57\xb9\x45\x5b\x30\xc0\xba\x48\x4f\x3c\x39\xf9\xd0\x35\xa1\x31\xdc\x09\xad\xc8\x0f\x57\x51\x09\x6e\xb3\x7c\x7e\x5a\x08\x09\x29\x77\x5b\x82\xad\x6f\xbd\x1f\x0a\xfa\x47\x30\x33\xe0\x3a\xac\x2f\xee\x6f\x6a\x8a\xbc\xc0\x95\xd6\x8e\x4d\xf3\xfc\xae\x2b\x83\xf8\xb3\x5f\x8d\x90\xf9\x3a\x88\x08\x80\x25\x74\x88\xce\xc0\x56\x44\x8f\x85\x26\x9f\x18\x53\x3f\x21\xd6\x81\x72\x9d\xf7\xd4\xe7\x08\xcd\x22\x17\xad\xa3\xe7\x42\xe6\x5f\x90\x35\x0e\x08\x8d\x0f\x61\xba\xaf\xeb\x2f\x84\x04\xe5\xa7\xb6\x7b\x38\x34\x7c\x43\xb1\xa0\x76\x6f\x5c\x36\xe0\x47\x41\x5b\x76\x0f\x0e\xd4\x8e\x84\x37\xc6\x36\xfa\xb5\xae\xc1\x90\xa2\x72\x6c\x5d\x1b\xa1\x5c\x41\xf0\xc0\xbe\x0f\xec\x7b\x3a\xdd\x3c\xe0\xe1\xcf\x91\x47\xc7\x7c\x94\xf6\x16\x1f\x93\xdc\x4c\x10\xc6\x67\x36\x1b\x70\x8d\x51\x27\xfc\xec\x49\x04\xe4\x2a\x71\xc2\x06\x36\x19\x58\xe6\x74\x25\xf1\x10\x35\x16\xcc\x83\xae\x60\x26\x8c\x37\xbb\x57\xfd\xa4\xf7\x60\x7e\x0c\x0e\x3d\x13\x77\xb2\xeb\x82\xa3\xf7\x26\x12\x05\x0a\x7f\x40\xec\x7e\xb9\x5c\xa3\xc9\x04\xe1\xbd\x50\xb9\xde\x5b\x5f\x41\x14\x6d\x75\x75\xe5\x1a\x7e\x58\x3e\xcf\x67\xab\xc7\xb7\x39\xa6\xe8\xdf\x6b\xa0\x35\x8c\xc6\x91\x67\x6e\xef\x4e\x82\x19\x51\xe0\xba\xa0\x7a\x5d\xcf\x57\xe9\x6a\xb9\x78\x7c\x9a\xb7\x97\x0e\x71\x14\x05\x4f\x7c\x70\xec\x0f\xc2\xfe\x2a\x0f\xf6\xb5\xfd\x0e\x00\x00\xff\xff\xbb\x36\x93\xca\x7a\x05\x00\x00")

func templates_main_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_main_tmpl,
		"templates/main.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"templates/commands.tmpl": templates_commands_tmpl,
	"templates/main.tmpl": templates_main_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"commands.tmpl": &_bintree_t{templates_commands_tmpl, map[string]*_bintree_t{
		}},
		"main.tmpl": &_bintree_t{templates_main_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
