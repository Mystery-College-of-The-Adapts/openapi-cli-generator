package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _templates_commands_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x4b\x73\xdc\xb8\x11\x3e\x93\xbf\x02\xcb\xb2\xb7\x48\x7b\xcc\xf1\x6e\xb6\x72\x98\xec\xa4\x4a\x96\x1f\x72\x95\x25\x2b\x7a\xac\x0f\x8a\x2a\x86\xc8\x9e\x19\x94\x48\x80\x02\x41\x3d\x32\xcb\xff\x9e\x6a\x00\x24\xc1\x21\x67\x24\x39\xb9\xe4\x22\x51\x68\x00\xfd\xfe\xba\x1b\x9a\x4e\xc9\xbe\x48\x81\x2c\x81\x83\xa4\x0a\x52\x72\xf5\x40\x44\x01\x9c\x16\xec\x4d\x92\xb1\x37\x96\x20\x64\x4c\xde\x7f\x25\x47\x5f\xcf\xc8\x87\xf7\x9f\xcf\x62\x7f\x3a\x25\xa7\x00\x64\xa5\x54\x51\xce\xa6\xd3\x25\x53\xab\xea\x2a\x4e\x44\x3e\x95\x6c\x09\x4a\xb1\xe9\xe8\x2d\xbe\x5f\xd0\xe4\x9a\x2e\x81\xe4\x94\x71\xdf\x67\x79\x21\xa4\x22\xa1\xef\xad\xd7\x84\x2d\x48\xfc\x59\x2f\x94\xf1\xc7\x5c\x91\xba\x0e\x16\xb9\x0a\xd6\x6b\x02\x3c\x25\x75\x3d\xd8\x74\xaa\x24\xe3\xcb\x12\x37\x96\xe6\x73\xc7\xe6\x33\x96\x03\xee\x54\x2c\x07\x67\x9b\xef\x05\x4f\x15\x7e\x9a\x64\x2c\xe8\xef\x2f\xae\x97\x53\x90\x52\xc8\x72\x83\x20\xcb\xe9\xbf\x41\x8a\x4c\x2c\xa7\x99\x58\x6e\x10\xcb\x62\xf1\xcb\x5f\xa6\x89\xb8\x92\x74\x94\x72\xcb\x0a\x90\x9a\x22\x8a\xeb\x65\xcc\xf8\x74\xf5\x2b\x17\x7c\xba\x04\xae\x32\xc8\x29\x8f\x6f\x7f\x0d\xfc\xc8\xf7\xd7\x6b\x92\xc2\x82\x71\x20\x41\x41\x25\xcd\xcb\xc0\x6a\xfe\x86\x48\xca\x97\x40\xe2\xaf\x85\x62\x82\xd3\xec\x58\x93\x35\x55\x93\xd9\x82\xc0\x0d\x89\xcf\x1e\x0a\x20\xc1\x95\x10\x19\x50\x6e\x0e\x7b\x5e\x92\xa7\xf1\xc7\x8c\x2e\xcb\x30\x8a\xdf\x09\x91\x85\x68\xae\x78\xff\xcb\xe7\x23\x6a\x4c\x38\x21\x0b\x9a\x95\x30\x21\x9a\xf0\x1e\xca\x44\x32\xcd\x07\x89\x91\xe5\x00\x59\x09\x7d\x36\x8c\xab\xbf\xfe\x36\xc6\xe4\x33\x12\x46\xb8\xbc\x7d\x2e\x87\x45\x26\xe8\x16\x1e\x1f\x0d\x69\x8c\x4b\xfc\x14\x3e\xc3\x1b\x4d\xf4\x8d\x5c\x18\x04\x8f\xdc\xd7\x06\xe8\x9b\x2e\x0a\x1d\x9f\x7d\xa3\x4c\x81\xb4\xce\x1a\x3a\xe3\x8e\x32\xf5\x06\xaf\x37\xfb\xb6\x3b\xc6\xd2\x4f\x57\x98\x62\x86\x7f\x8f\x65\x92\xb1\xf8\x14\xd4\x7e\x55\x2a\x91\x1b\x1e\x49\x9e\x46\xbe\xef\xb1\x05\x71\xf9\x1e\xd0\xd2\x7e\x92\xb5\xef\x79\x26\xd4\xe2\x77\x8c\xa7\xc7\xed\xb1\x66\x73\xe4\x7b\xb5\xef\xa4\xd7\x7a\x4d\x5e\x70\x14\x6f\x36\x27\xb1\x95\x53\x2f\xd2\x82\xe9\xb5\x4f\x62\x63\xf5\xb8\xba\xca\x58\xa2\x69\xe6\xb3\xdb\xe1\xdf\x52\x49\x9a\xc3\x75\x7d\x5a\x5d\x25\x22\xcf\x29\x4f\x09\x86\xb0\xef\x2f\x2a\x9e\xb8\x74\x90\xb7\x20\x51\xec\x8b\xcb\x9c\x16\x17\x06\x24\x2e\xcd\x2f\x54\x45\x82\xaa\x24\x1f\xa3\xae\xb5\xaf\xac\x47\x5e\x94\xfa\x22\x2d\x92\xbd\xd3\xc6\xc3\xe8\x39\xcf\x0b\xd2\xce\xf3\xc1\x4c\x7b\xc3\xde\xb1\x19\x13\x13\xb3\xbf\x92\xd9\xc6\xbe\xf3\x93\x2f\x2d\xbd\x9e\x18\x69\x9a\xc0\xa9\x7d\x63\x58\x2b\x9d\x28\x10\x9f\xf0\x42\x14\xf0\x6b\xf3\x97\x91\x71\x3a\x25\x7d\xbb\xd6\x35\xc6\x46\x6b\x53\xa4\xb6\x21\xe2\x7b\xae\x05\xc7\x0f\x84\x2d\xe3\xf8\x04\x6e\x2a\x26\x21\x6d\xc1\xa5\x7f\xb3\xb1\xc8\x84\xb4\x92\x9b\xc0\x21\xaf\x34\xbe\xc5\x7f\xe0\x4f\x0b\xd2\xfb\x94\x1f\xd0\x5b\x78\x27\xd2\x07\x52\xd7\x13\x72\x85\x1f\xd6\xa2\xcd\xe9\x88\x84\xaf\x3a\x04\x3c\x81\xb2\x10\x1c\x63\x1d\x99\x9e\x68\x47\x6a\x10\xc0\xe3\x1a\x92\x4d\xb0\xae\x28\x4f\x33\x90\xc7\x54\xad\xd0\x3c\x3a\x31\x0e\xcc\x5a\x93\x35\xbe\x87\x01\x3f\x1a\x56\xda\x9d\xee\x15\xe6\x06\x13\xd1\x75\x4d\x02\xf2\x9a\x38\x64\xdf\xf3\x30\xb1\xbc\x2e\x5e\x30\xc7\x4e\x2a\xbe\x2f\xf8\x82\x2d\xe3\x4f\xa0\x8e\xa5\x58\xb0\x0c\xc2\x28\xde\x2b\xd8\xf9\xc9\x17\xdc\x5e\xc9\x0c\xf7\x9a\x53\xaf\xb5\x88\x9a\x19\xca\x66\x31\xc3\xba\x9a\x4d\xc8\x0b\x6d\x45\xed\xea\x81\xfd\x51\xda\x0e\xdd\xcd\xce\xf8\x33\xc7\xea\xa0\x56\x0d\x2a\x6a\x76\x73\x6b\xdd\x32\x3e\x81\x22\xa3\x09\x84\x95\xcc\x34\x6e\x7c\x5f\x7f\xd7\x8e\xb4\xa7\xad\x91\xd6\xeb\xef\xf5\x77\x8d\x30\x1d\xa9\xf5\xf4\x84\xfc\x12\x35\xac\x9b\x18\xed\x43\x8d\x27\xe1\xa6\x31\xc7\x7e\xc6\x80\xab\x18\xb5\x3c\x04\xb5\x12\xb8\x25\x8c\x30\xe0\x51\x86\xc8\xef\x65\xde\x93\x14\x1e\xea\x7b\x53\x81\x7c\x68\x15\x46\xe6\x73\x22\xe1\x26\xde\x4b\xd3\x7f\x20\xc9\xa0\x76\x07\x9b\x23\x4a\x59\x8d\xdc\x2a\xe3\x30\x58\x01\x4d\x41\x8e\x73\x38\xd0\xb4\xe7\xb0\xe8\x6c\xe6\x98\xec\x91\x2a\xee\xf5\x93\x6d\x36\x27\x16\x97\x3f\x81\x42\x92\x4e\x86\x3f\x89\x62\x2a\xd3\x69\xbb\x59\xa7\x34\x73\x13\xf7\xce\x35\x3f\xcd\x49\x73\xf8\x88\x65\x1a\x1f\xb4\x82\x4e\xcf\x30\xb4\xef\x13\x0c\xbc\xc8\x55\x7c\x5a\x48\xc6\xd5\x22\x0c\x5e\xde\x1a\x7b\x38\x96\x88\x5a\x2e\x6e\x55\x1f\xb1\xf4\x53\x4c\xfd\x0c\x66\x8d\xe5\xbd\x61\xc8\x8e\x42\x93\x35\x9a\xc6\xa7\x9f\xe6\x24\x08\xac\x7d\x46\xa5\xda\x17\x5c\x01\x57\x6f\xd0\x9a\x4d\x4f\x70\x08\x29\xa3\x16\xa8\x02\x2c\xe9\xe9\x83\x6d\x24\xf0\xce\xa8\x13\xc5\x91\x04\xb3\xc6\x60\xd6\x3b\x58\x08\x09\xa1\x03\x39\x13\xeb\xf6\x09\x32\x8f\x4c\xaa\x95\x85\x86\x40\x8c\x09\x94\xe8\xbd\x08\x23\x83\x71\xb8\xf8\xd3\x9c\x70\x96\x19\xb1\x6d\xfd\xe3\x2c\x9b\x98\x1f\xa6\x97\x8d\xbf\x49\x5a\x84\x20\xe5\x84\x04\x98\x72\x50\x2a\xb2\xa0\x2c\x83\x54\x47\x8d\x96\x09\x2b\x71\x0a\x89\x48\x21\x1d\x22\xb0\x6f\xd8\xa1\x24\xf1\xa9\xa2\xaa\x2a\xf5\x94\xf1\x3b\xf9\xed\xed\x5b\xc3\xd9\x0a\x63\x21\xe1\x9c\xe7\x54\x96\x2b\x9a\x35\xa8\x1e\x1a\x25\x7e\xb6\x1c\xa2\xbf\x0d\x44\x7f\x8a\xec\xed\xb5\x19\xd6\x7b\x69\xef\x76\x55\xd1\xb6\xae\x4d\xcc\xed\xb4\xc8\x07\xfc\xb5\x08\x83\x83\xb3\xb3\x63\xf2\x32\x9d\x91\x97\x65\x30\xd9\x54\xb0\x5d\xd0\xfe\x8c\x5a\x5b\xd1\x85\xea\xaa\x81\x71\xe4\x1e\x2e\x6d\xf3\x23\xaa\xde\x68\x6e\x2c\x69\x6e\x70\xf5\x6f\x6c\x3f\x37\x34\x13\xac\x1c\x7a\x8e\xc0\x8e\x1b\xe4\x82\x26\xb0\xae\x31\x81\xe2\x70\xe0\xa9\xc8\x85\x1f\x8b\xd4\xda\x02\x3d\x29\xb4\x2d\x86\x8d\x9d\xc5\xe8\x3b\xdd\x67\x6a\x80\x76\x5b\xd7\x67\xb5\x12\x6d\xd7\xf2\xbf\x68\x2a\x22\xe3\x35\x6d\x28\xaa\x14\xe4\x85\x42\xe9\xde\xfa\x9e\xb7\x10\x92\x34\x4b\xbf\x6b\xe9\x8c\xf4\xf1\x9e\x59\x2c\x5b\xc8\xb3\xbb\x5e\xbf\xf6\x4d\x5c\xf4\xcc\x61\x63\x77\x4c\xbb\x4e\x93\xff\x46\xcf\x81\x82\x91\x93\x35\x63\x79\x30\x8c\xfe\x7d\x51\x65\x29\xe1\x42\x91\x84\x66\x19\xb1\x5e\x6a\x9b\xc5\x26\xfe\xf1\x27\x26\x33\x4d\x54\x45\x33\xe2\x84\x4c\x43\xc9\xa9\x4a\x56\xa6\xc3\xf6\xdc\xda\xac\xd7\xad\xe3\x0f\xcd\x77\x53\x9b\x3c\x73\x9b\x31\x94\x89\xfb\x4f\xa0\xf4\xa6\x3f\x68\x56\x99\xfc\x8e\x35\x3e\xde\x2b\x8b\x8c\xa7\x90\x41\xa2\x0c\x82\xdb\x52\xb6\x97\x65\xa7\x38\x8f\x73\x9c\x2c\x7a\x39\x31\x6e\x8b\xa7\x18\x63\x09\x8a\x34\x92\xdf\xa2\x2c\xc6\x10\xd6\x12\x9e\x26\xb9\x72\x6b\xa1\x4d\x85\x39\x43\x20\xd4\xf2\x5d\x5c\x5e\x3d\x28\xd0\xe9\xf4\xe1\xbe\x80\x44\x41\x4a\xfe\x24\xa6\xe4\x90\xe0\xe5\x0d\x66\x5b\x34\xb1\x36\xfd\x11\x79\xbf\x59\x09\x8d\xed\x11\xb1\x2a\xd9\x4a\xda\xd6\x48\x43\xb5\x77\xb5\x7d\x90\x46\x24\x9c\x86\xed\xa9\xb6\x74\x6e\xb0\x6b\x30\xcd\x24\x2d\x49\x28\x47\xfb\x48\xa0\xc9\x8a\xa4\x50\x62\x70\x92\x52\x5f\x75\x05\x09\xad\x4a\x20\x2f\x4b\xc2\x4a\x03\x7d\x03\x97\xed\xb6\x45\x2b\xa2\x33\x4c\x7b\x9e\x77\x25\x81\x5e\x77\xb4\xb6\x1a\x7b\x75\xbf\x35\xc2\xbf\x14\xcb\x21\x3e\xcd\x00\x8a\xd0\x0c\xd7\x19\xc5\x8a\xfc\xca\xac\x43\x22\x78\xda\x22\x2e\x42\xa6\xcd\xf2\xbf\xcf\x77\xa6\x79\xdf\x24\x47\x70\x17\x06\x87\xf4\x9e\xe5\x55\xde\xdc\x50\x12\xb8\x4f\x00\x52\xb7\xfa\x75\x65\x62\x03\x15\x37\x26\xd0\x13\x58\xb2\x12\x91\xbe\xec\x8f\xaa\x11\x09\xa5\x10\x8a\xbc\xd2\x8f\x40\xf1\xbe\x21\xe9\x89\x45\xaf\xdb\xc1\x41\x08\x65\xa6\xf1\xb2\x3f\x92\xd8\x3d\x3f\xf7\x4e\x6b\x75\xce\x4b\x98\xf5\x46\x14\x33\x41\xea\x01\xcf\x10\xe2\x33\xdb\x11\x1a\xca\x17\xc1\x97\x33\x1b\xe8\xf2\x3a\x15\x77\x3c\x1c\x7d\xbb\x98\xf8\x6d\x63\x32\x1c\x93\xe6\x44\xc9\x0a\x7c\xb7\x92\x36\xf2\xdb\xd9\x72\xbe\xc1\xdb\xdd\x81\x22\xb4\xc9\xb6\x4b\x06\xdf\x33\x2f\x25\xba\x2f\xeb\xbd\x92\xa0\x77\x11\x87\xb6\x5a\x04\x37\xf4\x4d\x81\xe7\x89\x2e\x07\x24\x01\xa9\x28\xe3\x04\x6e\x81\x2b\x22\x64\x1b\xf5\xd8\x6c\x11\xe3\x6b\xc6\x97\xae\xc1\x82\x77\x99\x48\xae\x31\x34\x20\xa9\xb4\x80\x68\x87\xaa\x84\x92\x14\xc2\xf4\x1b\x4a\x90\x02\x24\x13\x29\x43\xfc\x7d\x20\xc9\x0a\x92\xeb\x1f\xe0\x58\x5b\x87\x63\x67\x69\x15\x0b\x51\x9d\x8d\x49\x69\x4b\x15\xf6\x4c\x1d\xb6\x4f\x37\xcd\xe3\x0d\x6e\x33\x05\x13\x23\xde\x64\x67\x92\xa7\x5b\x4c\xe8\x84\x55\x7c\x5e\x76\xb1\xd3\x8e\x05\xf1\x5e\xc6\x28\xea\xde\x26\xb6\x5d\x98\x91\x8b\xde\xc3\x88\xd7\x1b\x6b\x06\xa7\x3c\x4f\xf3\x70\x18\x6c\xb6\xe9\xcd\x6b\xc8\x08\xc1\x8d\xf1\xf6\xcd\xcb\xee\xdd\x16\xe5\x3a\xf4\x9a\xf0\x46\xb1\xe5\xb2\x9c\x11\x63\x81\x43\xc6\x11\x06\x8e\x70\x0d\x11\x27\x03\xbe\xb3\x7e\x37\x77\x9c\x54\x7c\x46\xd0\xe8\x21\x5a\xb4\x9f\xe1\x13\x42\xe5\xb2\x6c\x8d\xd2\x38\xc5\xed\x87\x9f\xd8\x31\xbd\xb8\xef\x4d\xc6\x3b\xe4\x42\x8e\x17\x78\xeb\x3d\xa9\xeb\xcb\x61\x63\x31\xd2\x5b\x7b\x9e\x97\x89\x65\xfc\x91\x2a\x9a\x85\x11\x16\x0a\x2c\x4b\x51\x7c\x58\x2e\xc3\x40\x97\x0d\xdd\x4e\x60\x84\x46\x8d\x57\x7c\xd7\x39\xe6\x2f\xdc\xe3\x46\xad\x7d\x5d\x34\xc8\x8e\xd8\x9a\xe9\x3a\xd5\x3c\x5d\x77\x4a\x34\x33\x59\x18\xf5\x1f\xbe\xdc\x82\xf0\xc4\xf7\xaf\x7e\xf8\x8f\x47\x7f\xd3\xe8\xc0\x3d\xcd\x8b\x0c\x4a\xdb\x64\xfa\xfd\x76\x07\xee\xf5\xfd\x1f\x9a\x4d\x36\xee\xda\x43\xaf\xe7\x24\x20\xfa\x45\xa8\x45\x36\xab\x38\xf6\xf7\x61\x44\x5e\x93\x40\x7b\xb7\x95\xd7\x26\x93\x5e\x04\xf4\xce\x3f\x79\x30\xac\x7b\x3b\xf2\x72\x4b\x5a\x6e\xcb\xca\xad\x49\xb9\x33\x27\x07\x29\xb9\x99\x78\xf5\x64\x64\x9e\xde\x95\x8e\x4f\xcc\xc6\x46\x8d\x03\x96\xa6\xc0\x5b\x76\xe6\xcf\x99\x6e\x38\x5a\xd2\xa8\x08\xd6\x55\xb3\xd6\xb1\x66\xd7\xa3\x49\xbe\x2d\xb5\x7f\x24\xb3\x1b\x25\x86\xcf\x08\x9e\x87\x13\xff\xc4\x9d\x83\x3f\x81\xc2\x0d\xe1\xf0\xa5\xc0\x5c\x7f\x31\x2e\x61\x5d\xcf\x2e\x6d\x1e\x8e\x76\x99\x3b\x92\xf9\x9c\xd3\xab\x0c\xb0\x56\x61\x5f\x8c\x02\x35\x19\x5d\x0f\x50\xd6\x6d\x33\xe3\x23\x80\xb4\x6c\xc6\x75\x52\xd7\xd8\xd0\x77\xed\xdd\xbf\xda\x10\x7e\xda\xd0\xf4\x38\xc0\x3d\x17\xd6\x76\x3c\x2c\x77\x2f\xca\x3f\x66\x33\x03\x80\x89\x7d\x56\xd8\x18\xa8\xda\x41\x62\xe3\x89\xe3\xa3\x90\x39\x36\x94\xd2\x7e\x85\x3b\x9e\x36\x76\x31\xb7\xf7\x20\x67\xf7\x1d\xa3\x63\x3b\xd6\x1e\x99\xde\xff\xe6\xb8\x45\xbf\xb1\xf9\xca\x6f\xd3\x7b\xf4\xf1\xd5\x81\xad\xd1\x67\xd8\x1e\x8f\x8b\x60\xf0\x82\x1c\x5c\x92\x79\x1b\xc4\x2f\xb0\x81\xbc\xec\x18\xf6\x22\x6c\xc7\x38\x3a\x1a\x8f\xe3\xff\x38\xb3\x2e\xe8\x1e\x45\x1f\xfd\xef\x59\x57\x8d\xbd\xbb\xed\x85\xa2\xcf\x53\x47\x69\xa9\xc7\x20\x61\x9a\x2f\x44\x12\xb7\xa3\x79\xfe\x24\xdc\xdd\xa7\x13\xbf\x35\xea\xc6\x00\xbc\x3d\x74\x77\x06\xd0\xe3\x93\xb0\x1b\x4d\xa8\x80\x5c\x36\x69\x86\x0a\x0e\x1f\x57\xdd\x29\x77\xcc\x43\xfd\xff\x60\xa4\x9b\x06\x1b\x44\xd1\xff\xbf\xc9\x6c\xf8\xc4\xa7\xa0\x34\x96\xbf\x60\xa9\x05\xf1\x47\x4d\xb5\xbb\x11\xb4\x41\xbb\x0d\x2e\xc7\x02\xd1\x71\x9f\x03\x92\x77\x3b\x9b\xbf\x1d\xb6\xb0\x8f\x05\x7a\x5e\xee\x94\xaf\xfb\x5d\xe0\x46\x1d\x36\xd5\x59\x7f\x6f\x0e\x32\x6d\x4b\x38\xde\x11\xda\x77\xc9\x30\x72\x7b\x3f\x3b\x7d\xfb\xb5\xff\x9f\x00\x00\x00\xff\xff\xc0\xff\xbb\x79\xbf\x22\x00\x00")

func templates_commands_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_commands_tmpl,
		"templates/commands.tmpl",
	)
}

var _templates_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcd\x6e\xf2\x3a\x10\x5d\x27\x4f\xe1\x5a\xe2\x2a\xd6\xa5\x0e\x77\x77\x85\xc4\x02\x15\x68\x2b\xb5\x05\x01\xed\xb6\x72\x93\x49\xb0\xea\xd8\x91\x3d\x81\x4a\x15\xef\xfe\xc9\x89\xf9\x6d\x57\x1f\x9b\x78\x3c\x33\x67\xce\x9c\x19\x53\x8b\xec\x53\x94\x40\x2a\x21\x75\x1c\xcb\xaa\x36\x16\x49\x12\x13\x42\x08\x2d\x2a\xa4\xdd\x49\x99\x32\x9c\x6c\xa3\x51\x56\x10\x2c\xe3\xc2\xc1\xa1\x95\xba\x74\x34\x8e\x23\x5a\x4a\xdc\x34\x1f\x3c\x33\x55\x6a\x65\x09\x88\x32\x35\x35\x68\x51\xcb\xdb\x4c\xc9\xdb\x12\x34\x58\x81\xc6\xa6\x99\x92\x34\x66\x71\x5c\x34\x3a\x6b\x09\x24\x8c\x7c\xb7\x78\x99\xd1\x85\x2c\xc9\x70\x44\xfe\xc9\x94\xe4\x77\xad\xd9\xb9\xfc\x6f\x5c\xd7\x2f\xa2\x82\xa1\xaf\xfc\xfd\x4d\xb8\x37\xc8\x7e\x4f\xfb\xc7\x88\xa9\xde\x2e\x2c\x14\xf2\x6b\x78\x8a\x98\xea\xed\x65\xd0\x1b\x58\x27\x8d\x6e\x61\xfe\xe3\x03\x3e\x08\xbe\x7d\xc7\x41\x49\xfe\xa8\x25\x26\x1d\x19\x16\xb7\xb7\x39\x14\xa2\x51\xe8\x3c\x37\x1f\xf1\x02\xbb\x7b\x65\x3e\x84\x9a\x29\x51\x4e\x82\x33\xa1\x1b\xc4\x7a\x98\xa6\xca\x64\x42\x6d\x8c\xc3\xe1\xff\x83\xc1\x80\xb2\x16\xa2\x3c\xc6\xbb\xfe\x99\xb1\x02\xec\x13\xb0\xf6\x80\xfc\x2c\x3e\x61\xac\xf3\x85\xb0\x0e\x4e\x25\x5c\x72\x60\xd0\x81\xc9\xa2\xcd\xb9\x19\x11\x2d\x15\x39\x49\xa4\x4c\xc9\x67\x02\x85\x4a\xc0\x5a\x16\xda\x6a\x3f\x69\x4a\xd6\xf3\xc9\x7c\x48\xc6\x79\x4e\x2c\x94\xd2\x21\x58\x92\x99\xaa\x12\x3a\x77\x64\x03\x16\x78\x17\xe9\x81\x47\x47\x1d\xba\x21\x34\x56\xa0\x34\x3a\xf9\xa1\x2a\x29\x01\xd7\xf3\xe7\xa7\x99\x54\xb0\x10\xb8\x49\xa8\xf3\xa3\xf7\x4b\xc1\x7e\x75\x66\x16\xb0\xf3\x9d\x9a\xfb\x9b\x9e\x22\x4f\x70\x9c\xe7\x1d\xbf\xbb\xd0\x47\xe2\x6f\x97\xc6\x20\x3b\x06\x8c\x1b\xdc\xfc\xe2\x3e\x0e\xdb\x9b\x7c\xe1\x77\xc2\x21\x68\xec\xd4\x66\x3e\x33\x8c\x27\xb9\x18\x16\x0b\xa5\xdb\xb4\xe9\x17\x64\x0d\x42\xc2\xe2\x7d\xd8\xe7\xeb\x8e\x0b\xa9\x40\xfb\x3d\xed\x9e\x0a\x0b\xdf\xd0\x1e\xe8\xed\x9b\x50\x0d\xf8\xe1\x1b\xc7\xef\x01\x41\x6f\x93\xf0\xaa\xf8\xda\xbc\xd6\x35\xd8\xa4\xa8\x90\xaf\x6a\x2b\x35\x16\x09\xed\xb9\xf7\x9e\x7b\x5f\x8c\xd7\x0f\xb4\xff\x73\xc9\xc9\xa1\x1e\x63\x27\x51\x0f\x45\x6e\x46\x84\xd2\x33\x61\x2d\x60\x63\xf5\xd1\x7f\xf6\x08\x82\xe7\xaa\x70\xca\x7b\x2e\xed\x39\x8e\xa6\x52\xb4\x4f\x1a\x07\xf6\xc1\x54\x30\x91\x36\x61\x7d\x72\x62\xfd\x64\x76\x60\x7f\xac\x0a\x3b\x23\x77\x94\xeb\x02\xe3\xa4\x4d\x24\x0b\x12\xfe\x72\xf8\xfd\x7c\xbe\x22\xa3\x11\xa1\x3b\xa9\x73\xb3\x73\xbe\x83\x28\xda\x98\xea\x4a\x35\xfa\x30\x7f\x9e\x4e\x96\x8f\x6f\x53\xca\xc8\xbf\xd7\x8e\x56\x30\x16\x47\x1e\xb9\xcd\x1d\x05\x31\xa2\x80\x75\x01\xf5\xba\x9a\x2e\x17\xcb\xf9\xec\xf1\x69\xda\x26\xed\xe3\x28\x0a\x9a\xf8\xe0\xd8\x5f\x04\xfb\xaa\x0e\xf5\xbd\xfd\x09\x00\x00\xff\xff\x96\x9c\xfd\x63\x5e\x05\x00\x00")

func templates_main_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_main_tmpl,
		"templates/main.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"templates/commands.tmpl": templates_commands_tmpl,
	"templates/main.tmpl": templates_main_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"commands.tmpl": &_bintree_t{templates_commands_tmpl, map[string]*_bintree_t{
		}},
		"main.tmpl": &_bintree_t{templates_main_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
