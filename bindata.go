package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _templates_commands_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5f\x53\xdc\x38\x12\x7f\xb6\x3f\x85\xe2\x22\x5b\x76\x18\x3c\xd9\xbd\xad\x7b\x98\xdb\xb9\xaa\x84\x24\x40\x55\x20\x1c\x90\xcd\x03\x47\x5d\x84\xdd\x33\xa3\xc2\x96\x8c\xac\xe1\xcf\xce\xfa\xbb\x5f\xb5\x24\xdb\xf2\xd8\x33\x40\xee\x5e\xf6\x05\x8c\x5b\x56\xb7\xba\x7f\xfd\xeb\x6e\x31\x1e\x93\x7d\x91\x02\x99\x03\x07\x49\x15\xa4\xe4\xfa\x91\x88\x02\x38\x2d\xd8\x5e\x92\xb1\x3d\x2b\x10\x32\x26\x1f\xbe\x90\x93\x2f\x17\xe4\xe3\x87\xa3\x8b\xd8\x1f\x8f\xc9\x39\x00\x59\x28\x55\x94\x93\xf1\x78\xce\xd4\x62\x79\x1d\x27\x22\x1f\xdf\xd0\xec\x0f\x21\xc6\x83\x9b\xf8\x7e\x41\x93\x1b\x3a\x07\x92\x53\xc6\x7d\x9f\xe5\x85\x90\x8a\x84\xbe\xb7\x5a\x11\x36\x23\xf1\x91\x7e\x51\xc6\x9f\x72\x45\xaa\x2a\x98\xe5\x2a\x58\xad\x08\xf0\x94\x54\x55\x6f\xd1\xb9\x92\x8c\xcf\x4b\x5c\x58\x9a\xc7\x2d\x8b\x2f\x58\x0e\xb8\x52\xb1\x1c\x9c\x65\xbe\x17\x3c\xd3\xf6\x71\x92\xb1\xa0\xbb\xbc\xb8\x99\x8f\x41\x4a\x21\xcb\x35\x81\x2c\xc7\x7f\x80\x14\x99\x98\x8f\x33\x31\x5f\x13\x96\xc5\xec\xe7\xbf\x8d\x13\x71\x2d\xe9\xa0\xe4\x8e\x15\x20\xb5\x44\x14\x37\xf3\x98\xf1\xf1\xe2\x17\x2e\xf8\x78\x0e\x5c\x65\x90\x53\x1e\xdf\xfd\x12\xf8\x91\xef\xaf\x56\x24\x85\x19\xe3\x40\x82\x82\x4a\x9a\x97\x81\x3d\xf8\x1e\x91\x94\xcf\x81\xc4\x5f\x0a\xc5\x04\xa7\xd9\xa9\x16\x6b\xa9\x16\xb3\x19\x81\x5b\x12\x5f\x3c\x16\x40\x82\x6b\x21\x32\xa0\xdc\x7c\xec\x79\x49\x9e\xc6\x9f\x32\x3a\x2f\xc3\x28\x7e\x2f\x44\x16\xa2\xb7\xe2\xfd\xcf\x47\x27\xd4\x78\x70\x44\x66\x34\x2b\x61\x44\xb4\xe0\x03\x94\x89\x64\x5a\x0f\x0a\x23\xab\x01\xb2\x12\xba\x6a\x18\x57\x7f\xff\x75\x48\xc9\x11\x0a\x06\xb4\xbc\x7d\xa9\x86\x59\x26\xe8\x06\x1d\x9f\x8c\x68\x48\x4b\xfc\x1c\x3d\xfd\x1d\x0d\xf8\x06\x36\x0c\x82\x27\xf6\x6b\xf0\xb9\xd7\x82\xd0\x89\xd9\x37\xca\x14\x48\x1b\xac\x7e\x30\xee\x29\x53\x7b\xb8\xbd\x59\xb7\x39\x30\x56\x7e\xbe\xc0\x0c\x33\xfa\x3b\x2a\x93\x8c\xc5\xe7\xa0\xf6\x97\xa5\x12\xb9\xd1\x91\xe4\x69\xe4\xfb\x1e\x9b\x11\x57\xef\x21\x2d\xed\x23\x59\xf9\x9e\x67\xa0\x16\xbf\x67\x3c\x3d\x6d\x3e\xab\x17\x47\xbe\x57\xf9\x4e\x76\xad\x56\x64\x87\xa3\x79\x93\x29\x89\xad\x9d\xfa\x25\x2d\x98\x7e\x77\x20\xd6\xde\x9e\x2e\xaf\x33\x96\x68\x99\x79\x6c\x57\xf8\x77\x54\x92\xfa\xe3\xaa\x3a\x5f\x5e\x27\x22\xcf\x29\x4f\x09\x42\xd8\xf7\x67\x4b\x9e\xb8\x72\x90\x77\x20\xd1\xec\xcb\xab\x9c\x16\x97\x86\x23\xae\xcc\x2f\x3c\x8a\x04\xb5\x94\x7c\x48\xba\xd2\xb1\xb2\x11\xd9\x29\xf5\x46\xda\x24\xbb\xa7\xc5\xc3\xe0\x77\x9e\x17\xa4\x6d\xe4\x83\x89\x8e\x86\xdd\x63\x1d\x13\x23\xb3\x7e\x29\xb3\xb5\x75\x5f\xcf\x3e\x37\xf2\x6a\x64\xac\xa9\x81\x53\xf9\xc6\xb1\xd6\x3a\x51\x20\x3f\xe1\x86\x68\xe0\x97\xfa\x2f\x63\xe3\x78\x4c\xba\x7e\xad\x2a\xc4\x46\xe3\x53\x94\x36\x10\xf1\x3d\xd7\x83\xc3\x1f\x84\x8d\xe2\xf8\x0c\x6e\x97\x4c\x42\xda\x90\x4b\x77\x67\xe3\x91\x11\x69\x2c\x37\xc0\x21\x6f\x34\xbf\xc5\xbf\xe3\x4f\xcb\xd1\xfb\x94\x1f\xd2\x3b\x78\x2f\xd2\x47\x52\x55\x23\x72\x8d\x0f\xd6\xa3\xf5\xd7\x11\x09\xdf\xb4\x0c\x78\x06\x65\x21\x38\x62\x1d\x95\x9e\xe9\x40\x6a\x12\xc0\xcf\x35\x25\x1b\xb0\x2e\x28\x4f\x33\x90\xa7\x54\x2d\xd0\x3d\x3a\x31\x0e\xcd\xbb\x3a\x6b\x7c\x0f\x01\x3f\x08\x2b\x1d\x4e\x77\x0b\xb3\x83\x41\x74\x55\x91\x80\xec\x12\x47\xec\x7b\x1e\x26\x96\xd7\xe2\x05\x73\xec\x6c\xc9\xf7\x05\x9f\xb1\x79\x7c\x00\xca\xe0\x07\x55\x87\x91\x51\x6c\x17\x4f\xa7\x24\x08\x8c\xc2\xfa\xcd\x10\x94\x2f\x8d\xf3\x0e\x40\x1d\x71\x15\x06\x66\xe9\x1e\xe3\x29\x3c\x04\xd1\xd5\xa5\x46\xd2\x55\x6d\xc7\x52\x66\x68\x84\x59\xb4\xab\xcf\xae\x4f\x81\x87\xb6\x64\x64\x31\xc4\x46\x64\x47\x87\x47\x63\xa8\x17\x58\xb4\xaa\x2d\x1b\x66\x65\x7c\xc4\xb1\xec\xa8\x45\x4d\xb7\x5a\xdd\xd4\x86\xad\x8c\xcf\xa0\xc8\x68\x02\xe1\x52\x66\x9a\x90\xbe\xaf\xbe\x6b\x84\xd8\xaf\xad\xf7\x57\xab\xef\xd5\x77\x4d\x5d\xad\xa8\x81\xd0\x88\xfc\x1c\xd5\xaa\x6b\xf0\x77\x39\xcc\x93\x70\x5b\xfb\x79\x3f\x63\xc0\x55\x8c\xa7\x3c\x06\xb5\x10\xb8\x24\x8c\x30\x93\xd0\x86\xc8\xef\xa4\xf4\xb3\x0e\xdc\x3f\xef\xed\x12\xe4\x63\x73\x60\x54\x3e\x25\x12\x6e\xe3\x77\x69\xfa\x2f\x14\x99\x72\xd0\xf2\xf1\xc0\xa1\xec\x89\xdc\xf2\xe5\x28\x58\x00\x4d\x41\x0e\x6b\x38\xd4\xb2\x97\xa8\x68\x7d\xe6\xb8\xec\x89\xf6\xc0\xeb\x66\xf1\x64\x4a\x2c\xe1\x1f\x80\x42\x91\xce\xb2\x3f\x89\x62\x2a\xd3\x7c\xb0\x5e\x00\xb5\x72\x93\x50\xce\x36\xaf\x34\x9a\xf5\xc7\x27\x2c\xd3\xc4\xa3\x0f\xe8\x34\x23\x7d\xff\x3e\xc3\xc1\xb3\x5c\xc5\xe7\x85\x64\x5c\xcd\xc2\xe0\xf5\x9d\xf1\x87\xe3\x89\xa8\xd1\xe2\xb6\x0b\x03\x9e\x7e\x8e\xab\x5f\xa0\xac\xf6\xbc\xd7\x87\xec\x20\xe7\x59\xa7\x69\xe2\x7b\xd5\x52\xc1\xb0\x55\xfb\x82\x2b\xe0\x6a\x0f\xbd\x59\x37\x1b\xc7\x90\x32\x6a\x19\x30\xc0\x5e\x21\x7d\xb4\x1d\x0a\xee\x19\xb5\xa6\x38\x96\x60\xd6\x18\x32\x7c\x0f\x33\x21\x21\x74\xb8\x6c\x64\xc3\x3e\x42\xe5\x91\x49\xb5\xb2\xd0\xdc\x8a\x98\x40\x8b\x3e\x88\x9a\xc3\xf0\xe5\xab\x29\xe1\x2c\x33\x66\xdb\xc2\xca\x59\x36\x32\x3f\x4c\x93\x1c\x7f\x93\xb4\x08\x41\xca\x11\x09\x30\xe5\xa0\x54\x64\x46\x59\x06\xa9\x46\x8d\xb6\x09\x4b\x7c\x0a\x89\x48\x21\xed\x53\xbb\x6f\xd4\xa1\x25\xf1\xb9\xa2\x6a\x59\xea\xe1\xe5\x37\xf2\xeb\xdb\xb7\x46\xb3\x35\xc6\x52\xc2\x57\x9e\x53\x59\x2e\x68\x56\x97\x8b\xd0\x1c\xe2\x27\xab\x21\xfa\x47\xcf\xf4\xe7\xd8\xde\x6c\x9b\x61\x23\x21\xed\xde\xee\x51\xb4\xaf\x2b\x83\xb9\xad\x1e\xf9\x88\xbf\x66\x61\x70\x78\x71\x71\x4a\x5e\xa7\x13\xf2\xba\x0c\x46\xeb\x07\x6c\x5e\xe8\x78\x46\x8d\xaf\xe8\x4c\xb5\x65\xc6\x04\xf2\x1d\xbe\xda\x14\x47\x3c\x7a\x7d\x72\xe3\x49\xb3\x83\x7b\xfe\xda\xf7\x53\x23\x33\x60\xe5\xd0\x09\x04\xb6\xf2\x20\x67\x34\x81\x55\x85\x09\x14\x87\xbd\x48\x45\x2e\xfd\x58\xa6\xd6\x1e\xe8\x58\xa1\x7d\xd1\xef\x18\x2d\x47\xdf\xeb\x06\x56\x13\xb4\xdb\x13\xbf\xa8\x47\x69\xda\xa1\xff\x47\xb7\x12\x99\xa8\x69\x47\x51\xa5\x20\x2f\x14\x5a\xf7\xd6\xf7\xbc\x99\x90\xa4\x7e\xf5\x9b\xb6\xce\x58\x1f\xbf\x33\x2f\xcb\x86\xf2\xec\xaa\xdd\x5d\xdf\xe0\xa2\xe3\x0e\x8b\xdd\xa1\xd3\xb5\x27\xf9\x5f\xce\xd9\x3b\x60\xe4\x64\xcd\x50\x1e\xf4\xd1\xbf\x2f\x96\x59\x4a\xb8\x50\x24\xa1\x59\x46\x6c\x94\x9a\x2e\xb4\xc6\x3f\xfe\xc4\x64\xa6\x89\x5a\xd2\x8c\x38\x90\xa9\x25\x39\x55\xc9\xc2\xb4\xee\x9e\x5b\x9b\xf5\x7b\x1b\xf8\x63\xf3\x5c\xd7\x26\xcf\xec\x66\x1c\x65\x70\x7f\x00\x4a\x2f\xfa\x9d\x66\x4b\x93\xdf\xb1\xe6\xc7\x07\x65\x99\xf1\x1c\x32\x48\x94\x61\x70\x5b\xca\xde\x65\xd9\x39\x28\x85\x7d\x4a\x18\x75\x72\x62\xd8\x17\xcf\x71\xc6\x1c\x14\xa9\x2d\xbf\x43\x5b\x8c\x23\xac\x27\x3c\x2d\x72\xed\xd6\x46\x9b\x0a\x73\x81\x44\xa8\xed\xbb\xbc\xba\x7e\x54\xa0\xd3\xe9\xe3\x43\x01\x89\x82\x94\xfc\x49\x4c\xc9\x21\xc1\xeb\x5b\xcc\xb6\x68\x64\x7d\xfa\x23\xf6\x7e\xb3\x16\x1a\xdf\x23\x63\x2d\x65\x63\x69\x53\x23\x8d\xd4\xee\xd5\xf4\x41\x9a\x91\x70\xcc\xb6\x5f\x35\xa5\x73\x4d\x5d\xcd\x69\x26\x69\x49\x42\x39\xfa\x47\x02\x4d\x16\x24\x85\x12\xc1\x49\x4a\xbd\xd5\x35\x24\x74\x59\x02\x79\x5d\x12\x56\x1a\xea\xeb\x85\x6c\xbb\x2f\x1a\x13\x9d\x29\xdd\xf3\xbc\x6b\x09\xf4\xa6\x95\x35\xd5\xd8\xab\xba\xad\x11\xfe\xa5\x58\x0e\xf1\x79\x06\x50\x84\x66\x6a\xcf\x28\x56\xe4\x37\xe6\x3d\x24\x82\xa7\x0d\xe3\x22\x65\xda\x2c\xff\xe7\x74\x6b\x9a\x77\x5d\x72\x02\xf7\x61\x70\x4c\x1f\x58\xbe\xcc\xeb\x1d\x4a\x02\x0f\x09\x40\xea\x56\xbf\xb6\x4c\xac\xb1\xe2\xda\x68\x7b\x06\x73\x56\x22\xd3\x97\xdd\x19\x58\x0f\x3d\x52\x08\xd5\x0c\x1f\x42\x28\x33\xd1\x97\xdd\xb1\x46\x2f\x9a\x92\x9f\xf4\x35\x54\xbc\x6f\x24\xda\xf2\xaf\x25\x4c\x3a\x63\x8e\x99\x42\xf5\x90\x68\x04\xf1\x85\x6d\xfe\x8c\xe4\xb3\xe0\xf3\x89\xc5\xb4\xbc\x49\xc5\x3d\x0f\x07\xef\x3f\x46\x7e\xd3\x83\xf4\x47\xad\x29\x51\x72\x09\xbe\x5b\x34\x6b\xfb\xed\x7c\x3a\x5d\xd3\xed\xae\x40\x13\x9a\xbc\xda\x66\x83\xef\x99\xdb\x16\xdd\x82\x75\x6e\x5a\x30\x90\xe8\xb5\x8d\x1e\xc1\x05\x5d\x57\xe0\xf7\x44\x33\x3f\x49\x40\x2a\xca\x38\x81\x3b\xe0\x8a\x08\xd9\x00\x1c\xfb\x2a\x62\xc2\xca\xf8\xdc\x75\x58\xf0\x3e\x13\xc9\x0d\xa2\x00\x92\xa5\x36\x10\xfd\xb0\x2c\xa1\x24\x85\x30\xad\x85\x12\xa4\x00\xc9\x44\xca\x90\x6a\x1f\x49\xb2\x80\xe4\xe6\x07\x34\x56\x36\xe0\xd8\x44\xda\x83\x85\x78\x9c\xb5\xa1\x68\x43\xc1\xf5\x4c\xc9\xb5\xd7\x3f\xf5\x05\x10\x2e\x33\xb5\x11\xc1\x6d\x12\x31\xc9\xd3\x0d\x2e\x74\x60\x15\x7f\x2d\x5b\xec\x34\x13\x40\xfc\x2e\x63\x14\xcf\xde\xe4\xb0\x7d\x31\x21\x97\x9d\xcb\x15\xaf\x33\xc1\xf4\xbe\xf2\x3c\xad\xc3\x51\xb0\xde\x91\xd7\x37\x2a\x03\x02\x17\xe3\xcd\xbd\x99\x5d\xbb\x09\xe5\x1a\x7a\x35\xbc\xd1\x6c\x39\x2f\x27\xc4\x78\xe0\x98\x71\xcc\xf8\x13\x7c\x87\xe4\x92\x01\xdf\x5a\xaa\xeb\x3d\xce\x96\x7c\x42\xd0\xe9\x21\x7a\xf4\x4d\xc7\x9d\x23\x42\xe5\xbc\x6c\x9c\x52\x07\xc5\x6d\x7d\x9f\xd9\x1c\xed\x3c\x74\x86\xe0\x2d\x76\xa1\xc6\x4b\xdc\xf5\x81\x54\xd5\x55\xbf\x87\x18\x68\xa3\x3d\xcf\xcb\xc4\x3c\xfe\x44\x15\xcd\xc2\x08\x6b\x02\x56\xa0\x28\x3e\x2e\xe7\x61\xa0\x2b\x84\xee\x1c\x10\xa1\x51\x1d\x15\xdf\x0d\x8e\xf9\x0b\xd7\xb8\xa8\xb5\x37\x94\x86\xc4\x91\x46\x33\x5d\x92\xea\xeb\xef\xf6\x10\xf5\xf8\x15\x46\xdd\xcb\x33\x97\xfb\x9f\x79\x87\xd6\x85\xff\x30\xfa\xeb\x9e\x06\x1e\x68\x5e\x64\x50\xda\x7e\xd2\xef\x76\x36\xf0\xa0\xf7\xff\x58\x2f\xb2\xb8\x6b\x3e\xda\x9d\x92\x80\xe8\x5b\xa5\x86\xd9\xec\xc1\xb1\x95\x0f\x23\xb2\x4b\x02\x1d\xdd\xc6\x5e\x9b\x4c\xfa\x25\x60\x74\xfe\xcd\x83\x7e\x89\xdb\x92\x97\x1b\xd2\x72\x53\x56\x6e\x4c\xca\xad\x39\xd9\x4b\xc9\xf5\xc4\xab\x46\x03\xa3\xf3\xb6\x74\x7c\x66\x36\xd6\xc7\x38\x64\x69\x0a\xbc\x51\x67\xfe\x9c\xe8\xde\xa2\x11\x0d\x9a\x60\x43\x35\x69\x02\x6b\x56\x3d\x99\xe4\x9b\x52\xfb\x47\x32\xbb\x3e\x44\xff\xc6\xc0\xf3\x70\xb8\x1f\xb9\x23\xef\x01\x28\x5c\x10\xf6\x2f\x05\xcc\xf6\x97\xc3\x16\x56\xd5\xe4\xca\xe6\xe1\x60\x43\xb9\x25\x99\xbf\x72\x7a\x9d\x01\xd6\x2a\x6c\x81\xd1\xa0\x3a\xa3\xab\x1e\xcb\xba\x1d\x65\x7c\x02\x90\x96\xf5\x64\x4e\xaa\x0a\x7b\xf7\xb6\x93\xfb\x4f\x03\xe1\xe7\xcd\x47\x4f\x13\xdc\x4b\x69\x6d\xcb\xe5\x74\x7b\x2b\xfd\x63\x3e\x33\x04\x98\xd8\x1b\x84\xb5\xd9\xa9\x99\x19\xd6\x6e\x33\x3e\x09\x99\x63\xef\x28\xed\x53\xb8\xe5\x16\x63\x9b\x72\xbb\x0f\x6a\x76\xaf\x2c\x5a\xb5\x43\xed\x91\x69\xf3\x6f\x4f\x1b\xf6\x1b\x1a\xa5\xfc\x26\xbd\x07\xef\x59\x1d\xda\x1a\xbc\x71\xed\xe8\xb8\x0c\x7a\x97\xc5\xc1\x15\x99\x36\x20\xde\xc1\x06\xf2\xaa\x55\xd8\x41\xd8\x96\xc9\x73\x10\x8f\xc3\xff\x7c\xb3\x21\x68\xef\x3f\x9f\xfc\x0f\x5c\x5b\x8d\xbd\xfb\xcd\x85\xa2\xab\x53\xa3\xb4\xd4\x13\x8f\x30\xcd\x17\x32\x89\xdb\xd1\xbc\x7c\xe8\x6d\xf7\xd3\x89\xdf\x38\x75\x6d\xd6\xdd\x0c\xdd\xad\x00\x7a\x7a\xe8\x75\xd1\x84\x07\x90\xf3\x3a\xcd\xf0\x80\xfd\x7b\x54\x77\xa0\x1d\x8a\x50\xf7\x9f\x15\xe9\xba\xc3\x7a\x28\xfa\xeb\xbb\xcc\xc2\x27\x3e\x07\xa5\xb9\x7c\x87\xa5\x96\xc4\x9f\x74\xd5\xf6\x46\xd0\x82\x76\x13\x5d\x0e\x01\xd1\x09\x9f\x43\x92\xf7\x5b\x9b\xbf\x2d\xbe\xb0\xf7\x02\x7a\x34\x6e\x0f\x5f\x75\xbb\xc0\xb5\x3a\x6c\xaa\xb3\x7e\x5e\x1f\x64\x9a\x96\x70\xb8\x23\xb4\x57\x90\x61\xe4\xf6\x7e\x95\xff\xdf\x00\x00\x00\xff\xff\x34\xbe\xeb\x00\xf9\x22\x00\x00")

func templates_commands_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_commands_tmpl,
		"templates/commands.tmpl",
	)
}

var _templates_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xb1\x6a\xc3\x40\x10\x44\xeb\xdb\xaf\x58\x54\x04\x09\xe2\x93\xd3\xaa\x33\x89\x8a\x34\x71\x08\x21\xfd\xe5\xb4\x92\x17\xeb\x76\x8f\xd3\xc9\x98\x08\xfd\x7b\x90\x43\x70\x37\x33\x8f\x19\x26\x3a\x7f\x76\x03\x61\x70\x2c\x00\x1c\xa2\xa6\x8c\x25\x98\x62\xe0\x7c\x9a\xbf\xad\xd7\x50\x9f\xdd\xf8\xa3\x5a\x6b\x24\x71\x91\x77\x7e\xe4\xdd\x40\x42\xc9\x65\x4d\xb5\x1f\xb9\x80\x0a\xa0\x9f\xc5\xdf\x56\xca\x0a\x17\x30\x7e\x64\xfb\x2a\x9c\xcb\x87\x4d\x3d\xab\xf4\x3c\x2c\x60\xcc\x21\xc6\x37\x17\xa8\x41\xc4\x62\x59\xd0\x6e\x06\xd7\xb5\x78\x04\x63\x5a\xb9\xbc\x27\xea\xf9\xda\xdc\x59\x2b\x97\x7f\xfc\x45\x69\x62\x95\x5b\xf5\xc9\xee\xed\x7e\x4b\xd7\x0a\xc0\xd4\x35\x7e\x1e\x5f\x8e\x0d\x1e\xba\x0e\x13\x0d\x3c\x65\x4a\xe8\x35\x04\x27\xdd\x84\x27\x4a\x64\xe1\xef\xd3\x87\x6a\xb6\xed\x95\xfc\x9c\xa9\xac\x60\x85\xdf\x00\x00\x00\xff\xff\x1b\xab\x33\x04\x01\x01\x00\x00")

func templates_main_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_main_tmpl,
		"templates/main.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"templates/commands.tmpl": templates_commands_tmpl,
	"templates/main.tmpl": templates_main_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"commands.tmpl": &_bintree_t{templates_commands_tmpl, map[string]*_bintree_t{
		}},
		"main.tmpl": &_bintree_t{templates_main_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
